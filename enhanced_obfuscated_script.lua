
local base64 = require("mime").unb64
local key = 42
local encoded = [[FEKNY^XCDMMKGOb^^ZmO^B^^ZYZKY^OLSKZZ^aeMAF`XK]
^X_O  FEKNY^XCDMqq 



L_DI^CED
fzbudeu|cx~kfcpoL
XO^_XD
L
ODN ww
 CL
DE^
fzbuehlyik~on
^BOD 



fzbudeu|cx~kfcpo

L_DI^CED
XO^_XD

ODN 



fzbu`c~ugkr

L_DI^CED
XO^_XD

ODN 



fzbu`c~uf~xk

L_DI^CED
XO^_XD

ODN ODN  MO^MOD\aCDM|ED

Q 



qkCGHE^w

Q 







qoDKHFONw

LKFYO 







ql_^_XOw

 







qaOSHCDNw

oD_GaOSiENOi 







q~KXMO^w

ZZOX~EXYE 







qyBKAO|KF_Ow

 



W 



qiKGeXCOD^K^CEDw

Q 







qoDKHFONw

LKFYO 







qmXE_DNzXONCI^CEDw

 







qkCXzXONCI^CEDw

 







qmXE_DNyGEE^BDOYYw

 







qkCXyGEE^BDOYYw

 







qoKYCDMy^SFOw

oD_GoKYCDMy^SFOfCDOKX 



W 



q|CY_KFYw

Q 







qhERw

Q 











qoDKHFONw

LKFYO 











qyCPOw

|OI^EXDO]

 











q~XKDYZKXODISw

 











qiEFEXw

iEFEXLXEGxmh

 







W 







qiCXIFOw

Q 











qoDKHFONw

LKFYO 











qxKNC_Yw

 











qiEFEXw

iEFEXLXEGxmh

 











q~BCIADOYYw

 







W 







q~XKIOXw

Q 











qoDKHFONw

LKFYO 











qiEFEXw

iEFEXLXEGxmh

 











q~BCIADOYYw

 











qy^KX^zEYC^CEDw

iOD^OX
 







W 



W 



qy^XKLOXw

Q 







qoDKHFOw

LKFYO 







qrw


 







qsw


 







qpw


 



W 



qxKDNEGw

Q 







qk_^EkCXw

LKFYO 







qk_^EkCXnOFKSw

 



W W FEIKF
KHIMO^IEDDOI^CEDYMKGOBEEAL_DI^CED FEIKF
NL_DI^CEDOLEX
uL
CD
ZKCXYKONE
ZXCD^Ll_DI^CEDLnCYKHFOODN
ODN NHfEMyOX\CIOgOYYKMOe_^NHmO^yOX\CIOyIXCZ^iED^OR^oXXEX IHfEMyOX\CIOgOYYKMOe_^iEDDOI^L_DI^CEDODN IHmO^yOX\CIOyIXCZ^iED^OR^oXXEXiEDDOI^L_DI^CEDODN  ^KYA]KC^      yIXCZ^

Q 



~KHFO

MO^MOD\aCDM|ED 



~KXMO^

DCF 



gKCDo\OD^

DCF 



kXM_GOD^

 



l_DI^CEDY

QW 



iEDDOI^CEDY

QW 



~EEF

DCF W yIXCZ^~KHFO

MO^MOD\aCDM|ED FEIKF
L_DI^CED
zFKS~BK^hC^IB 







FEIKF
ZFKSOXm_C

MKGOzFKSOXYfEIKFzFKSOX}KC^lEXiBCFNzFKSOXm_C  







FEIKF
YIXOODm_C

cDY^KDIODO]yIXOODm_C 







YIXOODm_CdKGO

cD^XEyIXOOD 







YIXOODm_CzKXOD^

ZFKSOXm_C  







FEIKF
LXKGO

cDY^KDIODO]lXKGO 







LXKGOdKGO

cD^XElXKGO 







LXKGOzKXOD^

YIXOODm_C 







LXKGOyCPO

nCGDO]


 







LXKGOhKIAMXE_DN~XKDYZKXODIS

  







FEIKF
CGKMOfKHOF

cDY^KDIODO]cGKMOfKHOF 







CGKMOfKHOFdKGO

cD^XEcGKMO 







CGKMOfKHOFzKXOD^

LXKGO 







CGKMOfKHOFyCPO

nCGDO]




 







CGKMOfKHOFzEYC^CED

nCGDO]



 







CGKMOfKHOFcGKMO

XHRKYYO^CN 







CGKMOfKHOFhKIAMXE_DN~XKDYZKXODIS

 







CGKMOfKHOFcGKMO~XKDYZKXODIS

 







CGKMOfKHOFkDIBEXzECD^

|OI^EXDO]
  







FEIKF
YE_DN

cDY^KDIODO]yE_DN 







YE_DNdKGO

cD^XEyE_DN 







YE_DNzKXOD^

LXKGO 







YE_DNyE_DNcN

XHRKYYO^CN 







YE_DN|EF_GO

 







YE_DNzFKS  







FEIKF
^]OODyOX\CIO

MKGOmO^yOX\CIO~]OODyOX\CIO  







FEIKF
HF_XoLLOI^

cDY^KDIODO]hF_XoLLOI^ 







HF_XoLLOI^zKXOD^

MKGOfCMB^CDM 







HF_XoLLOI^yCPO

  







FEIKF
PEEG~]OODcDLE

~]OODcDLEDO]
oD_GoKYCDMy^SFO{_KN
oD_GoKYCDMnCXOI^CEDe_^

 







FEIKF
HF_X~]OODcDLE

~]OODcDLEDO]
oD_GoKYCDMy^SFO{_KN
oD_GoKYCDMnCXOI^CEDe_^

  







FEIKF
LKNOcD

^]OODyOX\CIOiXOK^OCGKMOfKHOF
PEEG~]OODcDLE
QcGKMO~XKDYZKXODIS

W 







FEIKF
LKNOe_^

^]OODyOX\CIOiXOK^OCGKMOfKHOF
PEEG~]OODcDLE
QcGKMO~XKDYZKXODIS

W 







FEIKF
HF_X~]OOD

^]OODyOX\CIOiXOK^OHF_XoLLOI^
HF_X~]OODcDLE
QyCPO

W

 







FEIKF
PEEG~]OOD

^]OODyOX\CIOiXOK^OCGKMOfKHOF
PEEG~]OODcDLE
QyCPO

nCGDO]


W  







LKNOcDzFKS 







LKNOcDiEGZFO^ON}KC^  







PEEG~]OODzFKS 







HF_X~]OODzFKS  







]KC^

  







LKNOe_^zFKS 







LKNOe_^iEGZFO^ON}KC^  







HF_X~]OODzFKS 







HF_X~]OODiEGZFO^ON}KC^  







HF_XoLLOI^nOY^XES 







YIXOODm_CnOY^XES 



ODN  



zFKS~BK^hC^IB ^KYA]KC^  fzbudeu|cx~kfcpoL_DI^CED 



LEX
C
\
CD
ZKCXYMO^MI
NE 







CL
^SZO\

^KHFO
^BOD 











CL
^SZOXK]MO^\
nO^OI^ON

L_DI^CED
^BOD 















FEIKF
L_DI

XK]MO^\
nO^OI^ON  















LEX
CDNOR
\KF_O
CD
NOH_MMO^_Z\KF_OYL_DI
NE 



















CL
\KF_O

ZIKFF
^BOD 























NOH_MYO^_Z\KF_OL_DI
CDNOR
L_DI^CEDL_DI 



























XIEDYEFOZXCD^qKFSY_G

hfeiaonw
^XCON
YODNCDM
^BO
KNEDCY
NO^OI^CED
XOGE^OY
^E
^BO
YOX\OX 



























XO^_XD 























ODN 



















ODN 















ODN 











ODN  











CL
^SZO\

L_DI^CED
KDN
NOH_MMO^CDLE\DKGO

IEGZKXO~KHFOY
^BOD 















FEIKF
EFN 















EFN

BEEAL_DI^CED\
L_DI^CED 



















XIEDYEFOZXCD^JqKF]AA]

hfeiaonw
IKFFON
IEGZKXO~KHFOY

NO^OI^ON
QDE^
EFNWJ 



















XO^_XD
^X_O 















ODN 











ODN 







ODN 



ODN ODN  ^KYA]KC^  FEIKF
}EXAYZKIO

MKGOmO^yOX\CIO}EXAYZKIO FEIKF
zFKSOXY

MKGOmO^yOX\CIOzFKSOXY FEIKF
x_DyOX\CIO

MKGOmO^yOX\CIOx_DyOX\CIO FEIKF
YOXcDZ_^yOX\CIO

MKGOmO^yOX\CIOYOXcDZ_^yOX\CIO FEIKF
xOZFCIK^ONy^EXKMO

MKGOmO^yOX\CIOxOZFCIK^ONy^EXKMO FEIKF
~]OODyOX\CIO

MKGOmO^yOX\CIO~]OODyOX\CIO  FEIKF
iFCOD^

zFKSOXYfEIKFzFKSOX FEIKF
gE_YO

iFCOD^mO^gE_YO FEIKF
iKGOXK

}EXAYZKIOi_XXOD^iKGOXK    FEIKF
iCXIFO

nXK]CDMDO]iCXIFO iCXIFOxKNC_Y

MO^MOD\aCDM|EDq|CY_KFYwqiCXIFOwqxKNC_Yw iCXIFOlCFFON

LKFYO iCXIFOiEFEX

MO^MOD\aCDM|EDq|CY_KFYwqiCXIFOwqiEFEXw iCXIFO~BCIADOYY

MO^MOD\aCDM|EDq|CY_KFYwqiCXIFOwq~BCIADOYYw iCXIFO|CYCHFO

LKFYO  FEIKF
~XKIOX

nXK]CDMDO]fCDO ~XKIOXiEFEX

MO^MOD\aCDM|EDq|CY_KFYwq~XKIOXwqiEFEXw ~XKIOX~BCIADOYY

MO^MOD\aCDM|EDq|CY_KFYwq~XKIOXwq~BCIADOYYw ~XKIOX|CYCHFO

LKFYO  yIXCZ^iEDDOI^CEDYiCXIFOfEEZ

x_DyOX\CIOxODNOXy^OZZONiEDDOI^fzbudeu|cx~kfcpoL_DI^CEDY 



CL
yIXCZ^~KXMO^
KDN
yIXCZ^~KXMO^iBKXKI^OX
^BOD 







FEIKF
ZXONCI^ONzEYC^CED

yIXCZ^l_DI^CEDYl_^_XO 







CL
ZXONCI^ONzEYC^CED
^BOD 











FEIKF
zKX^zEY
eDyIXOOD

iKGOXK}EXFN~E|CO]ZEX^zECD^ZXONCI^ONzEYC^CED 











FEIKF
GE_YOzEY

YOXcDZ_^yOX\CIOmO^gE_YOfEIK^CED 











FEIKF
YIXOODiOD^OX

|OI^EXDO]MKGOmO^yOX\CIO}EXAYZKIOi_XXOD^iKGOXK|CO]ZEX^yCPOr


MKGOmO^yOX\CIO}EXAYZKIOi_XXOD^iKGOXK|CO]ZEX^yCPOs

  











iCXIFOzEYC^CED

|OI^EXDO]zKX^zEYr
zKX^zEYs 











iCXIFO|CYCHFO

MO^MOD\aCDM|EDq|CY_KFYwqiCXIFOwqoDKHFONw
KDN
eDyIXOOD  











FEIKF
^XKIOXy^KX^

GE_YOzEY 











CL
MO^MOD\aCDM|EDq|CY_KFYwq~XKIOXwqy^KX^zEYC^CEDw

iOD^OX
^BOD 















^XKIOXy^KX^

YIXOODiOD^OX 











ODN  











~XKIOXlXEG

^XKIOXy^KX^ 











~XKIOX~E

iCXIFOzEYC^CED 











~XKIOX|CYCHFO

MO^MOD\aCDM|EDq|CY_KFYwq~XKIOXwqoDKHFONw
KDN
eDyIXOOD 







OFYO 











iCXIFO|CYCHFO

LKFYO 











~XKIOX|CYCHFO

LKFYO 







ODN 



OFYO 







iCXIFO|CYCHFO

LKFYO 







~XKIOX|CYCHFO

LKFYO 



ODN ODN      FEIKF
L_DI^CED
kXM_GOD^Y 



CL
MKGOzFKIOcN


EX

^BOD
XO^_XD
ODN  



FEIKF
ZFKIOcNY

Q 







qw

gE_YOzEY 







qw

gE_YOzEY 







qw

geyo 







qw

geyo 







qw

geyo 







qw

geyo 







qw

geyo 







qw

geyo 







qw

geyo 







qw

gE_YO 



W 



XO^_XD
ZFKIOcNYqMKGOzFKIOcNw
EX
ZNK^OgE_YOzEY ODN  ^KYAYZK]DL_DI^CED 



CL
MKGOzFKIOcN
T

EX

^BOD 







LEX
u
xOGE^O
CD
ZKCXYxOZFCIK^ONy^EXKMOmO^nOYIODNKD^Y
NE 











CL
xOGE^OdKGO

gKCDo\OD^
^BOD 















yIXCZ^gKCDo\OD^

xOGE^O 















HXOKA 











ODN 







ODN 



ODN ODN   yIXCZ^kXM_GOD^

kXM_GOD^Y   FEIKF
hER

DCF CL
aCDM|ED|CY_KFYhERoDKHFON
^BOD 



hER

cDY^KDIODO]zKX^ 



hERkDIBEXON

^X_O 



hERdKGO

NKDM 



hERzKXOD^

}EXAYZKIO 



hERyCPO

yIXCZ^~KHFOq|CY_KFYwhERyCPO 



hERiKDiEFFCNO

LKFYO 



hER~XKDYZKXODIS

yIXCZ^~KHFOq|CY_KFYwhER~XKDYZKXODIS 



hERiEFEX

yIXCZ^~KHFOq|CY_KFYwhERiEFEX 



hERzEYC^CED

|OI^EXDO]

 ODN   yIXCZ^iEDDOI^CEDY

yIXCZ^iEDDOI^CEDY
EX
QW
  yIXCZ^iEDDOI^CEDYhERfEEZ

x_DyOX\CIObOKX^HOK^iEDDOI^L_DI^CEDnOF^K 



CL
yIXCZ^~KXMO^
KDN
yIXCZ^~KXMO^iBKXKI^OX
KDN
aCDM|EDq|CY_KFYwhERoDKHFON
^BOD 







hERzEYC^CED

yIXCZ^~KXMO^iBKXKI^OXb_GKDECNxEE^zKX^zEYC^CED 



ODN ODN   yIXCZ^l_DI^CEDYl_^_XO

L_DI^CED 



CL
yIXCZ^~KXMO^
KDN
yIXCZ^~KXMO^iBKXKI^OX
^BOD 







XO^_XD
yIXCZ^~KXMO^iBKXKI^OXqyIXCZ^~KHFOqkCGHE^w~KXMO^wzEYC^CED
 














yIXCZ^~KXMO^iBKXKI^OXqyIXCZ^~KHFOqkCGHE^w~KXMO^w|OFEIC^S
 
yIXCZ^~KHFOqkCGHE^wl_^_XO 



ODN ODN  yIXCZ^l_DI^CEDYkIIOYY

L_DI^CEDiBKXKI^OX 



iBKXKI^OXiBCFNkNNONiEDDOI^L_DI^CEDiBCFN 







CL
iBCFNcYk~EEF
^BOD 











iBCFNkI^C\K^ONiEDDOI^L_DI^CED 















CL
yIXCZ^~KHFOqkCGHE^woDKHFON
^BOD 



















yIXCZ^gKCDo\OD^lCXOyOX\OXyIXCZ^kXM_GOD^
yIXCZ^l_DI^CEDYl_^_XO 















ODN 











ODN 







ODN 



ODN ODN  iFCOD^iBKXKI^OXkNNONiEDDOI^yIXCZ^l_DI^CEDYkIIOYY yIXCZ^l_DI^CEDYkIIOYYiFCOD^iBKXKI^OX     yIXCZ^l_DI^CEDYmO^iFEYOY^

L_DI^CED 



FEIKF
~KXMO^
iFEYOY^

DCF
GK^BB_MO 



FEIKF
yIXOODiOD^OX

|OI^EXDO]iKGOXK|CO]ZEX^yCPOr


iKGOXK|CO]ZEX^yCPOs

 



LEX
u
zFKSOX
CD
ZKCXYzFKSOXYmO^zFKSOXY
NE 







CL
zFKSOX
T
iFCOD^
KDN
zFKSOXiBKXKI^OX
KDN
zFKSOXiBKXKI^OXlCDNlCXY^iBCFNb_GKDECNxEE^zKX^
^BOD 











FEIKF
zKX^zEY
eDyIXOOD

iKGOXK}EXFN~E|CO]ZEX^zECD^zFKSOXiBKXKI^OXb_GKDECNxEE^zKX^zEYC^CED 











FEIKF
gKMDC^_NO

|OI^EXDO]zKX^zEYr
zKX^zEYs

yIXOODiOD^OXgKMDC^_NO 











CL
gKMDC^_NO

iFEYOY^
KDN
eDyIXOOD
^BOD 















~KXMO^
iFEYOY^

zFKSOX
gKMDC^_NO 











ODN 







ODN 



ODN 



XO^_XD
~KXMO^ ODN  yIXCZ^iEDDOI^CEDYcDZ_^hOMKDiEDDOI^CED

YOXcDZ_^yOX\CIOcDZ_^hOMKDiEDDOI^L_DI^CEDcDZ_^
MKGOzXEIIOYYONo\OD^ 



CL
MKGOzXEIIOYYONo\OD^
^BOD
XO^_XD
ODN 



CL
cDZ_^aOSiENO

aCDM|EDqkCGHE^waOSHCDN
KDN
aCDM|EDqkCGHE^woDKHFON
^BOD 







yIXCZ^~KXMO^

yIXCZ^~KXMO^
KDN
DCF
EX
yIXCZ^l_DI^CEDYmO^iFEYOY^ 



ODN ODN   FEIKF
EFN FEIKF
L_DI^CED
bEEAgE_YObC^ 



EFN

BEEAGO^KGO^BENMKGO
uuCDNOR
fzbudeu|cx~kfcpoL_DI^CEDyOFL
cDNOR
 







CL
DE^
IBOIAIKFFOX
KDN
yOFLcYkgE_YO
KDN
cDNORFE]OX

BC^
^BOD 











CL
yIXCZ^~KHFOqkCGHE^woDKHFON
KDN
yIXCZ^~KXMO^
^BOD 















FEIKF
^KXMO^zKX^

yIXCZ^~KXMO^iBKXKI^OX
KDN
yIXCZ^~KXMO^iBKXKI^OXqyIXCZ^~KHFOqkCGHE^w~KXMO^w 















CL
^KXMO^zKX^
^BOD 



















XO^_XD
ilXKGODO]yIXCZ^l_DI^CEDYl_^_XO 















ODN 











ODN 







ODN 







XO^_XD
EFNyOFL
cDNOR
 



ODN ODN  CL
MKGOzFKIOcN


EX

EX

^BOD 



bEEAgE_YObC^ OFYO 



yIXCZ^iEDDOI^CEDYfEEZ

x_DyOX\CIObOKX^HOK^iEDDOI^L_DI^CED 







CL
yIXCZ^~KHFOqkCGHE^woDKHFON
KDN
yIXCZ^~KXMO^
KDN
yIXCZ^~KXMO^iBKXKI^OX
^BOD 











yIXCZ^gKCDo\OD^lCXOyOX\OXyIXCZ^kXM_GOD^
yIXCZ^l_DI^CEDYl_^_XO 







ODN 



ODN ODN  



  yIXCZ^iEDDOI^CEDYfEEZ

x_DyOX\CIObOKX^HOK^iEDDOI^fzbudeu|cx~kfcpoL_DI^CED 



CL
yIXCZ^~KXMO^
KDN
yIXCZ^~KXMO^iBKXKI^OX
KDN
yIXCZ^~KHFOqiKGeXCOD^K^CEDwoDKHFON
^BOD 







FEIKF
B_GKDECN

yIXCZ^~KXMO^iBKXKI^OXlCDNlCXY^iBCFNb_GKDECN 







FEIKF
CY~KXMO^cDkCX

B_GKDECN
KDN
B_GKDECNmO^y^K^O

oD_Gb_GKDECNy^K^O~SZOlXOOLKFF 







FEIKF
ZXONCI^CED

CY~KXMO^cDkCX
KDN
yIXCZ^~KHFOqiKGeXCOD^K^CEDwkCXzXONCI^CED
EX
yIXCZ^~KHFOqiKGeXCOD^K^CEDwmXE_DNzXONCI^CED 







FEIKF
YGEE^BDOYY

CY~KXMO^cDkCX
KDN
yIXCZ^~KHFOqiKGeXCOD^K^CEDwkCXyGEE^BDOYY
EX
yIXCZ^~KHFOqiKGeXCOD^K^CEDwmXE_DNyGEE^BDOYY  







FEIKF
YBKAOeLLYO^

|OI^EXDO] 











GK^BYCD^CIA
 

 
yIXCZ^~KHFOqkCGHE^wyBKAO|KF_O 











GK^BIEY^CIA
 

 
yIXCZ^~KHFOqkCGHE^wyBKAO|KF_O 











GK^BYCD^CIA
 

 
yIXCZ^~KHFOqkCGHE^wyBKAO|KF_O 







  







FEIKF
^KXMO^zEYC^CED

yIXCZ^~KXMO^iBKXKI^OXqyIXCZ^~KHFOqkCGHE^w~KXMO^wzEYC^CED

yIXCZ^~KXMO^iBKXKI^OXqyIXCZ^~KHFOqkCGHE^w~KXMO^w|OFEIC^S
 
ZXONCI^CED 







FEIKF
fEEAzEYC^CED

ilXKGODO]iKGOXKilXKGOzEYC^CED
^KXMO^zEYC^CED

YBKAOeLLYO^  







FEIKF
FOXZlKI^EX

YGEE^BDOYY
 
 







CL
yIXCZ^~KHFOqiKGeXCOD^K^CEDwoKYCDMy^SFO

oD_GoKYCDMy^SFOfCDOKX
^BOD 











iKGOXKilXKGO

iKGOXKilXKGOfOXZfEEAzEYC^CED
FOXZlKI^EX 







OFYOCL
yIXCZ^~KHFOqiKGeXCOD^K^CEDwoKYCDMy^SFO

oD_GoKYCDMy^SFOyCDO
^BOD 











FOXZlKI^EX

GK^BYCDFOXZlKI^EX
 
GK^BZC

 











iKGOXKilXKGO

iKGOXKilXKGOfOXZfEEAzEYC^CED
FOXZlKI^EX 







OFYOCL
yIXCZ^~KHFOqiKGeXCOD^K^CEDwoKYCDMy^SFO

oD_GoKYCDMy^SFO{_KX^
^BOD 











FOXZlKI^EX

FOXZlKI^EX
t
 











iKGOXKilXKGO

iKGOXKilXKGOfOXZfEEAzEYC^CED
FOXZlKI^EX 







OFYOCL
yIXCZ^~KHFOqiKGeXCOD^K^CEDwoKYCDMy^SFO

oD_GoKYCDMy^SFOhE_DIO
^BOD 











FOXZlKI^EX



GK^BIEYFOXZlKI^EX
 
GK^BZC
 

 


FOXZlKI^EX 











iKGOXKilXKGO

iKGOXKilXKGOfOXZfEEAzEYC^CED
FOXZlKI^EX 







OFYOCL
yIXCZ^~KHFOqiKGeXCOD^K^CEDwoKYCDMy^SFO

oD_GoKYCDMy^SFOoFKY^CI
^BOD 











FOXZlKI^EX

GK^BYCDFOXZlKI^EX
 
GK^BZC
 

 


FOXZlKI^EX 











iKGOXKilXKGO

iKGOXKilXKGOfOXZfEEAzEYC^CED
FOXZlKI^EX 







OFYOCL
yIXCZ^~KHFOqiKGeXCOD^K^CEDwoKYCDMy^SFO

oD_GoKYCDMy^SFO{_KN
^BOD 











FOXZlKI^EX

FOXZlKI^EX
t
 











iKGOXKilXKGO

iKGOXKilXKGOfOXZfEEAzEYC^CED
FOXZlKI^EX 







OFYOCL
yIXCZ^~KHFOqiKGeXCOD^K^CEDwoKYCDMy^SFO

oD_GoKYCDMy^SFOi_HCI
^BOD 











FOXZlKI^EX

FOXZlKI^EX
t
 











iKGOXKilXKGO

iKGOXKilXKGOfOXZfEEAzEYC^CED
FOXZlKI^EX 







OFYOCL
yIXCZ^~KHFOqiKGeXCOD^K^CEDwoKYCDMy^SFO

oD_GoKYCDMy^SFO{_CD^
^BOD 











FOXZlKI^EX

FOXZlKI^EX
t
 











iKGOXKilXKGO

iKGOXKilXKGOfOXZfEEAzEYC^CED
FOXZlKI^EX 







ODN 



ODN ODN     
~OB
^EEF  FEIKF
k_^EkCXkI^C\K^ON

LKFYO FEIKF
k_^EkCXy^KX^~CGO

  FEIKF
L_DI^CED
k_^EkCX 



CL
aCDM|EDqxKDNEGwk_^EkCX
KDN
yIXCZ^~KXMO^
KDN
yIXCZ^~KXMO^iBKXKI^OX
^BOD 







FEIKF
B_GKDECN

yIXCZ^~KXMO^iBKXKI^OXlCDNlCXY^iBCFNb_GKDECN 







CL
B_GKDECN
^BOD 











FEIKF
CYcDkCX

B_GKDECNmO^y^K^O

oD_Gb_GKDECNy^K^O~SZOlXOOLKFF  











CL
CYcDkCX
^BOD 















CL
DE^
k_^EkCXkI^C\K^ON
^BOD 



















k_^EkCXy^KX^~CGO

^CIA 



















k_^EkCXkI^C\K^ON

^X_O 















ODN  















CL
^CIA

k_^EkCXy^KX^~CGO

aCDM|EDqxKDNEGwk_^EkCXnOFKS
^BOD 



















FEIKF
^EEF

iFCOD^iBKXKI^OXlCDNlCXY^iBCFNeLiFKYY~EEF 



















CL
^EEF
KDN
^EEFcYk~EEF
^BOD 























^EEFkI^C\K^O 



















ODN 















ODN 











OFYOCL
k_^EkCXkI^C\K^ON
^BOD 















k_^EkCXkI^C\K^ON

LKFYO 











ODN 







ODN 



ODN ODN    yIXCZ^l_DI^CEDYxKNC_YzECD^eDiCXIFOY

L_DI^CEDKDMFO 



CL
DE^
yIXCZ^
EX
DE^
yIXCZ^~KHFO
EX
DE^
yIXCZ^~KHFOy^XKLOX
^BOD
XO^_XD
|OI^EXDO]


ODN 



FEIKF
R

yIXCZ^~KHFOy^XKLOXr
 
GK^BIEYKDMFO 



FEIKF
P

yIXCZ^~KHFOy^XKLOXr
 
GK^BYCDKDMFO 



XO^_XD
|OI^EXDO]R

P ODN  FEIKF
KDMFO

  yIXCZ^l_DI^CEDYy^XKLO

L_DI^CED 



CL
yIXCZ^
KDN
yIXCZ^~KHFO
KDN
yIXCZ^~KHFOy^XKLOX
KDN
yIXCZ^~KHFOy^XKLOXoDKHFO
KDN
yIXCZ^~KXMO^
KDN
yIXCZ^~KXMO^iBKXKI^OX
KDN
yIXCZ^~KXMO^iBKXKI^OXlCDNlCXY^iBCFNb_GKDECNxEE^zKX^
^BOD 







FEIKF
^KXMO^zEYC^CED

yIXCZ^~KXMO^iBKXKI^OXb_GKDECNxEE^zKX^zEYC^CED 







FEIKF
ICXIFOzEY

^KXMO^zEYC^CED

yIXCZ^l_DI^CEDYxKNC_YzECD^eDiCXIFOYKDMFO

|OI^EXDO]
yIXCZ^~KHFOy^XKLOXs
 







iFCOD^iBKXKI^OXgE\O~EICXIFOzEY 







KDMFO

KDMFO

GK^BXKNyIXCZ^~KHFOy^XKLOXp 



ODN ODN      FEIKF
lEXIOLCOFNyO^^CDMY

Q 



oDKHFON

LKFYO 



iEFEX

iEFEXLXEGxmh

 W  FEIKF
zFKSOX

MKGOzFKSOXYfEIKFzFKSOX FEIKF
x_DyOX\CIO

MKGOmO^yOX\CIOx_DyOX\CIO FEIKF
iBKXKI^OX

zFKSOXiBKXKI^OX
EX
zFKSOXiBKXKI^OXkNNON}KC^  FEIKF
L_DI^CED
kZZFSlEXIOLCOFNiBKX 



LEX
u
c^OG
CD
CZKCXYiBKXmO^nOYIODNKD^Y
NE 







CL
c^OGcYkhKYOzKX^
EX
c^OGcYkgOYBzKX^
^BOD 











c^OGgK^OXCKF

oD_GgK^OXCKFlEXIOlCOFN 











c^OGiEFEX

lEXIOLCOFNyO^^CDMYiEFEX 







ODN 



ODN ODN  FEIKF
L_DI^CED
xOYO^iBKXKI^OXiBKX 



LEX
u
c^OG
CD
CZKCXYiBKXmO^nOYIODNKD^Y
NE 







CL
c^OGcYkhKYOzKX^
EX
c^OGcYkgOYBzKX^
^BOD 











c^OGgK^OXCKF

oD_GgK^OXCKFzFKY^CI 











c^OGiEFEX

c^OGhXCIAiEFEXiEFEX 







ODN 



ODN ODN  zFKSOXiBKXKI^OXkNNONiEDDOI^L_DI^CEDdO]iBKXKI^OX 



iBKXKI^OX

dO]iBKXKI^OX 



CL
lEXIOLCOFNyO^^CDMYoDKHFON
^BOD 







kZZFSlEXIOLCOFNiBKXKI^OX 



ODN ODN  x_DyOX\CIObOKX^HOK^iEDDOI^L_DI^CED 



CL
lEXIOLCOFNyO^^CDMYoDKHFON
^BOD 







kZZFSlEXIOLCOFNiBKXKI^OX 



OFYO 







xOYO^iBKXKI^OXiBKXKI^OX 



ODN ODN      FEIKF
fCHXKXS

FEKNY^XCDMMKGOb^^ZmO^B^^ZYXK]MC^B_H_YOXIED^OD^IEGABODFCHXKXSYACHCNCXOLYBOKNYGKCDfCDEXCKfCHF_K^R^  fCHXKXSdE^CLSABODII
fEKNCDM
XD ]KC^   FEIKF
~BOGOgKDKMOX

FEKNY^XCDMMKGOb^^ZmO^B^^ZYXK]MC^B_H_YOXIED^OD^IEGABODFCHXKXSXOLYBOKNYGKCDDCDC~BOGOgKDKMOXF_K FEIKF
yK\OgKDKMOX

FEKNY^XCDMMKGOb^^ZmO^B^^ZYXK]MC^B_H_YOXIED^OD^IEGABODFCHXKXSXOLYBOKNYGKCDDCDCyK\OgKDKMOXF_K FEIKF
}CDNE]

fCHXKXSiXOK^O}CDNE]Q 



~C^FO

abodii 



iOD^OX

^X_O 



k_^EyBE]

^X_O 



~KHzKNNCDM

 



gOD_lKNO~CGO

 



yCPO

nCGDO]


 W FEIKF
~KHY

Q 



gKCD

}CDNE]kNN~KHgKCD 



B\B

}CDNE]kNN~KHb\B 



FEIAGCYI

}CDNE]kNN~KHfEIA
gCYI 



ZFKSOX

}CDNE]kNN~KHzFKSOX 



GCYI

}CDNE]kNN~KHgCYI 



\CY_KF

}CDNE]kNN~KH|CY_KFY 



qcw

}CDNE]kNN~KHc W  FEIKF
FEIA

~KHYgKCDkNNfOL^mXE_ZHERh_^^ED
fEIA FEIKF
KCGHE^

~KHYgKCDkNNfOL^mXE_ZHERfEIA
yO^^CDMY FEIKF
KCGHE^

~KHYgKCDkNNxCMB^mXE_ZHERiKG
yO^^CDMY FEIKF
YCMGK

~KHYFEIAGCYIkNNfOL^mXE_ZHER~KXMO^
|CY_KFY FEIKF
YCMGK

~KHYFEIAGCYIkNNxCMB^mXE_ZHER|CY_KFY FEIKF
eXHC^

~KHYB\BkNNfOL^mXE_ZHER~KXMO^
eXHC^ FEIKF
eXHC^

~KHYB\BkNNxCMB^mXE_ZHERxKNEG
~Z FEIKF
YOFL\CY

~KHYZFKSOXkNNfOL^mXE_ZHERyOFL
|CY_KFY FEIKF
_^CFC^COY

~KHYGCYIkNNfOL^mXE_ZHERgKIXE FEIKF
K_^EKCX

~KHYFEIAGCYIkNNxCMB^mXE_ZHERk_^E
kCX FEIKF
ABOD

~KHYGCYIkNNxCMB^mXE_ZHERiLXKGO FEIKF
BOBO

~KHY\CY_KFkNNfOL^mXE_ZHERiXEYYBKCX FEIKF
AAA

~KHY\CY_KFkNNxCMB^mXE_ZHERgKZ FEIKF
YY

~KHYZFKSOXkNNxCMB^mXE_ZHERzFKSOX FEIKF
YYY

~KHYZFKSOXkNNxCMB^mXE_ZHERaEXHFER

bOKNFOYY FEIKF
L_IA

~KHY\CY_KFkNNfOL^mXE_ZHERnOYSDI   FEIKF
^EMMFOh_^^ED FEIKF
I_XXOD^zEYC^CED  FEIAkNNh_^^EDQ 



~OR^

fEKN
h_^^ED 



l_DI

L_DI^CED 







FEIKF
YIXOODm_C

cDY^KDIODO]yIXOODm_C 







YIXOODm_CxOYO^eDyZK]D

LKFYO 







YIXOODm_CzKXOD^

MKGOzFKSOXYfEIKFzFKSOX}KC^lEXiBCFNzFKSOXm_C  







^EMMFOh_^^ED

cDY^KDIODO]cGKMOh_^^ED 







^EMMFOh_^^EDzKXOD^

YIXOODm_C 







^EMMFOh_^^EDyCPO

nCGDO]


 







^EMMFOh_^^EDzEYC^CED

nCGDO]


 







^EMMFOh_^^EDcGKMO

XHRKYYO^CN 







^EMMFOh_^^EDhKIAMXE_DN~XKDYZKXODIS

 







I_XXOD^zEYC^CED

^EMMFOh_^^EDzEYC^CED  







FEIKF
L_DI^CED
^EMMFO 











CL
yIXCZ^~KXMO^
^BOD 















FEIKF
^KXMO^nCYZFKSdKGO

yIXCZ^~KXMO^iBKXKI^OX
KDN
yIXCZ^~KXMO^iBKXKI^OXlCDNlCXY^iBCFNb_GKDECN
KDN
yIXCZ^~KXMO^iBKXKI^OXb_GKDECNnCYZFKSdKGO
EX
DADE]D 















CL
MO^MOD\DE^CLY
^BOD 



















fCHXKXSdE^CLSDFEIAON 















ODN 















yIXCZ^~KXMO^

DCF 











OFYO 















yIXCZ^~KXMO^

yIXCZ^l_DI^CEDYmO^iFEYOY^ 















CL
yIXCZ^~KXMO^
KDN
MO^MOD\DE^CLY
^BOD 



















FEIKF
^KXMO^nCYZFKSdKGO

yIXCZ^~KXMO^iBKXKI^OX
KDN
yIXCZ^~KXMO^iBKXKI^OXlCDNlCXY^iBCFNb_GKDECN
KDN
yIXCZ^~KXMO^iBKXKI^OXb_GKDECNnCYZFKSdKGO
EX
DADE]D 



















fCHXKXSdE^CLS~KXMO^CDM


^KXMO^nCYZFKSdKGO 















ODN 











ODN 







ODN  







^EMMFOh_^^EDgE_YOh_^^EDiFCIAiEDDOI^^EMMFO  







FEIKF
NXKMMCDM
NXKMy^KX^
Y^KX^zEY

LKFYO
DCF
DCF 







^EMMFOh_^^EDcDZ_^hOMKDiEDDOI^L_DI^CEDCDZ_^ 











CL
CDZ_^YOXcDZ_^~SZO

oD_GYOXcDZ_^~SZO~E_IB
EX
CDZ_^YOXcDZ_^~SZO

oD_GYOXcDZ_^~SZOgE_YOh_^^ED
^BOD 















NXKMMCDM

^X_O 















NXKMy^KX^

CDZ_^zEYC^CED 















Y^KX^zEY

^EMMFOh_^^EDzEYC^CED 











ODN 







ODN  







^EMMFOh_^^EDcDZ_^iBKDMONiEDDOI^L_DI^CEDCDZ_^ 











CL
NXKMMCDM
KDN
CDZ_^YOXcDZ_^~SZO

oD_GYOXcDZ_^~SZO~E_IB
EX
CDZ_^YOXcDZ_^~SZO

oD_GYOXcDZ_^~SZOgE_YOgE\OGOD^
^BOD 















FEIKF
NOF^K

CDZ_^zEYC^CED

NXKMy^KX^ 















I_XXOD^zEYC^CED

nCGDO]Y^KX^zEYryIKFO
Y^KX^zEYreLLYO^

NOF^Kr
Y^KX^zEYsyIKFO
Y^KX^zEYseLLYO^

NOF^Ks 















^EMMFOh_^^EDzEYC^CED

I_XXOD^zEYC^CED 











ODN 







ODN  







^EMMFOh_^^EDcDZ_^oDNONiEDDOI^L_DI^CEDCDZ_^ 











CL
CDZ_^YOXcDZ_^~SZO

oD_GYOXcDZ_^~SZO~E_IB
EX
CDZ_^YOXcDZ_^~SZO

oD_GYOXcDZ_^~SZOgE_YOh_^^ED
^BOD 















NXKMMCDM

LKFYO 











ODN 







ODN 







 



FEIKF
CIEXDOX

cDY^KDIODO]ciEXDOX 



CIEXDOXiEXDOXxKNC_Y

nCGDO]
 



CIEXDOXzKXOD^

^EMMFOh_^^ED 



ODN 



nE_HFOiFCIA

LKFYO 



~EEF^CZ

DCF W  FEIAkNNyFCNOXYCPOH_^^ED
Q 



~OR^

yCPO 



nOLK_F^

 



gCD

 



gKR

 



xE_DNCDM

 



iEGZKI^

LKFYO  



iKFFHKIA

L_DI^CED|KF_O 







CL
^EMMFOh_^^ED
^BOD 











^EMMFOh_^^EDyCPO

nCGDO]
|KF_O

|KF_O 











CL
I_XXOD^zEYC^CED
^BOD 















^EMMFOh_^^EDzEYC^CED

nCGDO]I_XXOD^zEYC^CEDryIKFO
I_XXOD^zEYC^CEDreLLYO^
I_XXOD^zEYC^CEDsyIKFO
I_XXOD^zEYC^CEDseLLYO^ 











ODN 







ODN 



ODN W  KCGHE^kNN~EMMFOKCGHE^^EMMFO
Q 



~OR^

~KXMO^
kCG 



nOLK_F^

LKFYO
 



~EEF^CZ

DCF  



iKFFHKIA

L_DI^CED|KF_O 







yIXCZ^~KHFOqkCGHE^woDKHFON

|KF_O 



ODN W  KCGHE^kNNcDZ_^zXONCI^CEDhER
Q 



nOLK_F^

 



d_GOXCI

^X_O
 



lCDCYBON

LKFYO 



~OR^

zXONCI^CED 



~EEF^CZ

DCF
 



zFKIOBEFNOX

oD^OX
ZXONCI^CED
BOXO
  



iKFFHKIA

L_DI^CEDDK_ 







yIXCZ^~KHFOqkCGHE^wl_^_XO

DK_ 



ODN W KCGHE^kNNnXEZNE]DBC^ZKX^Y
Q 



|KF_OY

Q
bOKN
ZZOX~EXYE
b_GKDECNxEE^zKX^
fE]OX~EXYE
W 



nOLK_F^

ZZOX~EXYE 



g_F^C

LKFYO  



~OR^

bC^zKX^ 



~EEF^CZ

DCF
 



iKFFHKIA

L_DI^CED_]_ 







yIXCZ^~KHFOqkCGHE^w~KXMO^

_]_ 



ODN W YCMGKkNN~EMMFOdE^CLCIK^CEDY
Q 



~OR^

dE^CLCIK^CEDY 



nOLK_F^

LKFYO 



iKFFHKIA

L_DI^CED|KF_O 







MO^MOD\DE^CLY

|KF_O 



ODN W FEIKF
x_DyOX\CIO

MKGOmO^yOX\CIOx_DyOX\CIO FEIKF
zFKSOXY

MKGOmO^yOX\CIOzFKSOXY FEIKF
FEIKFzFKSOX

zFKSOXYfEIKFzFKSOX  MO^MOD\FEEA

LKFYO MO^MOD\\CO]

LKFYO  YCMGKkNN~EMMFOfEEA
K^
Q 



~OR^

fEEA
K^ 



nOLK_F^

LKFYO 



~EEF^CZ

DCF 



iKFFHKIA

L_DI^CED|KF_O 







MO^MOD\FEEA

|KF_O 



ODN W  YCMGKkNN~EMMFO|CO]
Q 



~OR^

|CO] 



nOLK_F^

LKFYO 



~EEF^CZ

DCF 



iKFFHKIA

L_DI^CED|KF_O 







MO^MOD\\CO]

|KF_O 



ODN W  FEIKF
L_DI^CED
_ZNK^O|CO] 



CL
MO^MOD\\CO]
KDN
yIXCZ^~KXMO^
KDN
yIXCZ^~KXMO^iBKXKI^OX
^BOD 







MKGOmO^yOX\CIO}EXAYZKIOi_XXOD^iKGOXKiKGOXKy_H@OI^

yIXCZ^~KXMO^iBKXKI^OXb_GKDECN 



OFYO 







MKGOmO^yOX\CIO}EXAYZKIOi_XXOD^iKGOXKiKGOXKy_H@OI^

FEIKFzFKSOXiBKXKI^OXb_GKDECN 



ODN ODN  FEIKF
L_DI^CED
_ZNK^OfEEAk^ 



CL
MO^MOD\FEEA
KDN
yIXCZ^~KXMO^
KDN
yIXCZ^~KXMO^iBKXKI^OX
^BOD 







FEIKF
^KXMO^zEYC^CED

yIXCZ^~KXMO^iBKXKI^OXb_GKDECNxEE^zKX^zEYC^CED 







FEIKF
I_XXOD^zEYC^CED

FEIKFzFKSOXiBKXKI^OXb_GKDECNxEE^zKX^zEYC^CED 







FEIKF
BEXCPED^KF~KXMO^zEYC^CED

|OI^EXDO]^KXMO^zEYC^CEDr
I_XXOD^zEYC^CEDs
^KXMO^zEYC^CEDp 







FEIKFzFKSOXiBKXKI^OXb_GKDECNxEE^zKX^ilXKGO

ilXKGODO] 











I_XXOD^zEYC^CED 











BEXCPED^KF~KXMO^zEYC^CED 







 







FEIKFzFKSOXiBKXKI^OXb_GKDECNk_^ExE^K^O

LKFYO 



OFYO 







FEIKFzFKSOXiBKXKI^OXb_GKDECNk_^ExE^K^O

^X_O 



ODN ODN  x_DyOX\CIOxODNOXy^OZZONiEDDOI^fzbudeu|cx~kfcpoL_DI^CEDY 



_ZNK^O|CO] 



_ZNK^OfEEAk^ 



yIXCZ^l_DI^CEDYy^XKLO

 



k_^EkCX ODN    KCGHE^kNN~EMMFOiKGFEIA^EMMFO
Q 



~OR^

iKG
fEIA 



nOLK_F^

LKFYO
 



~EEF^CZ

DCF  



iKFFHKIA

L_DI^CED|KF_O 







yIXCZ^~KHFOqiKGeXCOD^K^CEDwoDKHFON

|KF_O 



ODN W KCGHE^kNNcDZ_^zXONCI^CEDhER
Q 



nOLK_F^

 



d_GOXCI

^X_O 



lCDCYBON

LKFYO


 



~OR^

zXONCI^CED 



~EEF^CZ

DCF
 



zFKIOBEFNOX

oD^OX
ZXONCI^CED
BOXO
  



iKFFHKIA

L_DI^CEDBOS 







yIXCZ^~KHFOqiKGeXCOD^K^CEDwmXE_DNzXONCI^CED

BOS 



ODN W KCGHE^kNNcDZ_^zXONCI^CEDhER
Q 



nOLK_F^

 



d_GOXCI

^X_O
 



lCDCYBON

LKFYO 



~OR^

kCX
zXONCI^CED 



~EEF^CZ

DCF
 



zFKIOBEFNOX

oD^OX
ZXONCI^CED
BOXO
  



iKFFHKIA

L_DI^CEDL_L_ 







yIXCZ^~KHFOqiKGeXCOD^K^CEDwkCXzXONCI^CED

L_L_ 



ODN W KCGHE^kNNyFCNOXYGEE^BDOYY
Q 



~OR^

yGEE^BDOYY 



nOLK_F^

 



gCD

 



gKR

 



xE_DNCDM

 



iEGZKI^

LKFYO  



iKFFHKIA

L_DI^CED@KCXEA 







yIXCZ^~KHFOqiKGeXCOD^K^CEDwmXE_DNyGEE^BDOYY

@KCXEA 



ODN W KCGHE^kNNyFCNOXYGEE^BDOYY
Q 



~OR^

kCX
yGEE^BDOYY 



nOLK_F^

 



gCD

 



gKR

 



xE_DNCDM

 



iEGZKI^

LKFYO  



iKFFHKIA

L_DI^CED@KCXEA 







yIXCZ^~KHFOqiKGeXCOD^K^CEDwkCXyGEE^BDOYY

@KCXEA 



ODN W KCGHE^kNNnXEZNE]DOKYCDM
Q 



|KF_OY

Q
fCDOKX
yCDO
{_CD^
{_KX^
i_HCI
{_KN
oFKY^CI
hE_DIO
W 



nOLK_F^

fCDOKX 



g_F^C

LKFYO  



~OR^

oKYCDMy^SFO 



~EEF^CZ

DCF
 



iKFFHKIA

L_DI^CEDHKAK 







yIXCZ^~KHFOqiKGeXCOD^K^CEDwoKYCDMy^SFO

HKAK 



ODN W   YCMGKkNN~EMMFOICXIFO
Q 



~OR^

iCXIFO 



nOLK_F^

LKFYO
 



~EEF^CZ

DCF  



iKFFHKIA

L_DI^CED|KF_O 







aCDM|ED|CY_KFYiCXIFOoDKHFON

|KF_O 



ODN W   YCMGKkNNyFCNOXiCXIFOxKNC_Y
Q 



~OR^

iCXIFO
xKNC_Y 



nOLK_F^

MO^MOD\aCDM|EDq|CY_KFYwqiCXIFOwqxKNC_Yw 



gCD

 



gKR

 



xE_DNCDM

 



iEGZKI^

LKFYO 



iKFFHKIA

L_DI^CED|KF_O 







MO^MOD\aCDM|EDq|CY_KFYwqiCXIFOwqxKNC_Yw

|KF_O 







iCXIFOxKNC_Y

|KF_O 



ODN W  YCMGKkNNyFCNOXiCXIFO~BCIADOYY
Q 



~OR^

iCXIFO
~BCIADOYY 



nOLK_F^

MO^MOD\aCDM|EDq|CY_KFYwqiCXIFOwq~BCIADOYYw 



gCD

 



gKR

 



xE_DNCDM

 



iEGZKI^

LKFYO 



iKFFHKIA

L_DI^CED|KF_O 







MO^MOD\aCDM|EDq|CY_KFYwqiCXIFOwq~BCIADOYYw

|KF_O 







iCXIFO~BCIADOYY

|KF_O 



ODN W YCMGKkNN~EMMFO^XKIOX
Q 



~OR^

~XKIOX 



nOLK_F^

LKFYO
 



~EEF^CZ

DCF  



iKFFHKIA

L_DI^CED|KF_O 







aCDM|ED|CY_KFY~XKIOXoDKHFON

|KF_O 



ODN W YCMGKkNNyFCNOX~XKIOX~BCIADOYY
Q 



~OR^

~XKIOX
~BCIADOYY 



nOLK_F^

MO^MOD\aCDM|EDq|CY_KFYwq~XKIOXwq~BCIADOYYw 



gCD

 



gKR

 



xE_DNCDM

 



iEGZKI^

LKFYO 



iKFFHKIA

L_DI^CED|KF_O 







MO^MOD\aCDM|EDq|CY_KFYwq~XKIOXwq~BCIADOYYw

|KF_O 







~XKIOX~BCIADOYY

|KF_O 



ODN W    YCMGKkNNnXEZNE]DzEYC^CED~XKIOX
Q 



|KF_OY

Q
gE_YO
iOD^OX
W 



nOLK_F^

aCDM|ED|CY_KFY~XKIOXy^KX^zEYC^CED

iOD^OX
KDN

EX
 



g_F^C

LKFYO
 



~OR^

~XKIOX
ZEYC^CED 



~EEF^CZ

DCF 



iKFFHKIA

L_DI^CED|KF_O 







aCDM|ED|CY_KFY~XKIOXy^KX^zEYC^CED

|KF_O

iOD^OX
KDN
iOD^OX
EX
gE_YO 



ODN W YCMGKkNNfKHOFiCXIFOiEFEXkNNiEFEXzCIAOXiCXIFOiEFEXzCIAOX
Q 



nOLK_F^

iEFEXDO]

 



~C^FO

iCXIFO
iEFEX 



iKFFHKIA

L_DI^CED|KF_O 







MO^MOD\aCDM|EDq|CY_KFYwqiCXIFOwqiEFEXw

|KF_O 







iCXIFOiEFEX

|KF_O 



ODN W  YCMGKkNNfKHOF~XKIOXiEFEXkNNiEFEXzCIAOX~XKIOXiEFEXzCIAOX
Q 



nOLK_F^

iEFEXDO]

 



~C^FO

~XKIOX
iEFEX 



iKFFHKIA

L_DI^CED|KF_O 







MO^MOD\aCDM|EDq|CY_KFYwq~XKIOXwqiEFEXw

|KF_O 







~XKIOXiEFEX

|KF_O 



ODN W eXHC^kNN~EMMFOEXHC^^EMMFO
Q 



~OR^

oDKHFO 



nOLK_F^

LKFYO
 



~EEF^CZ

DCF  



iKFFHKIA

L_DI^CEDSOY 







yIXCZ^~KHFOqy^XKLOXwoDKHFO

SOY 



ODN W eXHC^kNNyFCNOXEXHC^R
Q 



~OR^

r 



nOLK_F^

 



gCD

 



gKR

 



xE_DNCDM

 



iEGZKI^

LKFYO  



iKFFHKIA

L_DI^CED@KCXEA 







yIXCZ^~KHFOqy^XKLOXwr

@KCXEA 



ODN W eXHC^kNNyFCNOXEXHC^S
Q 



~OR^

s 



nOLK_F^

 



gCD

 



gKR

 



xE_DNCDM

 



iEGZKI^

LKFYO  



iKFFHKIA

L_DI^CED@KCXEA 







yIXCZ^~KHFOqy^XKLOXws

@KCXEA 



ODN W eXHC^kNNyFCNOXEXHC^P
Q 



~OR^

p 



nOLK_F^

 



gCD

 



gKR

 



xE_DNCDM

 



iEGZKI^

LKFYO  



iKFFHKIA

L_DI^CED@KCXEA 







yIXCZ^~KHFOqy^XKLOXwp

@KCXEA 



ODN W  FEIKF
zFKSOXY

MKGOmO^yOX\CIOzFKSOXY FEIKF
iKGOXK

MKGOmO^yOX\CIO}EXAYZKIOi_XXOD^iKGOXK FEIKF
YOXcDZ_^yOX\CIO

MKGOmO^yOX\CIOYOXcDZ_^yOX\CIO FEIKF
iFCOD^

zFKSOXYfEIKFzFKSOX  FEIKF
^OFOZEX^K^CED

Q 



KI^C\O

LKFYO 



bOCMB^

 



xKNC_Y

 W  FEIKF
L_DI^CED
XKDNEG~OFOZEX^ 



CL
^OFOZEX^K^CEDKI^C\O
KDN
yIXCZ^~KXMO^
KDN
yIXCZ^~KXMO^iBKXKI^OX
KDN
yIXCZ^~KXMO^iBKXKI^OXlCDNlCXY^iBCFNb_GKDECNxEE^zKX^
^BOD 







FEIKF
^KXMO^zEYC^CED

yIXCZ^~KXMO^iBKXKI^OXb_GKDECNxEE^zKX^zEYC^CED  







FEIKF
XKDNEGeLLYO^

|OI^EXDO] 











GK^BXKDNEG^OFOZEX^K^CEDxKNC_Y
^OFOZEX^K^CEDxKNC_Y 











^OFOZEX^K^CEDbOCMB^ 











GK^BXKDNEG^OFOZEX^K^CEDxKNC_Y
^OFOZEX^K^CEDxKNC_Y 







  







FEIKF
^OFOZEX^zEYC^CED

^KXMO^zEYC^CED

XKDNEGeLLYO^ 







iFCOD^iBKXKI^OXgE\O~E^OFOZEX^zEYC^CED 



ODN ODN  MKGOmO^yOX\CIOx_DyOX\CIObOKX^HOK^iEDDOI^fzbudeu|cx~kfcpoL_DI^CED 



CL
^OFOZEX^K^CEDKI^C\O
^BOD 







XKDNEG~OFOZEX^ 







]KC^ 



ODN ODN   iFCOD^iBKXKI^OXkNNONiEDDOI^L_DI^CEDIBKXKI^OX 



FEIKF
B_GKDECN

IBKXKI^OX}KC^lEXiBCFNb_GKDECN 



B_GKDECNyO^y^K^OoDKHFONoD_Gb_GKDECNy^K^O~SZOzBSYCIY
LKFYO ODN  eXHC^kNN~EMMFOxKDNEG~Z~EMMFO
Q 



~OR^

xKDNEG
~Z 



nOLK_F^

LKFYO 



iKFFHKIA

L_DI^CED|KF_O 







^OFOZEX^K^CEDKI^C\O

|KF_O 



ODN W  eXHC^kNNyFCNOXbOCMB^yFCNOX
Q 



~OR^

bOCMB^ 



nOLK_F^

 



gCD

 



gKR

 



xE_DNCDM

 



iKFFHKIA

L_DI^CED|KF_O 







^OFOZEX^K^CEDbOCMB^

|KF_O 



ODN W  eXHC^kNNyFCNOXxKNC_YyFCNOX
Q 



~OR^

xKNC_Y 



nOLK_F^

 



gCD

 



gKR

 



xE_DNCDM

 



iKFFHKIA

L_DI^CED|KF_O 







^OFOZEX^K^CEDxKNC_Y

|KF_O 



ODN W  FEIKF
^XKCFiEFEX

iEFEXDO]

  YOFL\CYkNN~EMMFO^XKCF^EM
Q 



~OR^

~XKCF 



nOLK_F^

LKFYO 



~EEF^CZ

DCF  



iKFFHKIA

L_DI^CED|KF_O 







MO^MOD\^XKCF

|KF_O  







FEIKF
L_DI^CED
IXOK^O~XKCFIBKXKI^OX 











FEIKF
B_GKDECNxEE^zKX^

IBKXKI^OX}KC^lEXiBCFNb_GKDECNxEE^zKX^ 











CL
DE^
B_GKDECNxEE^zKX^lCDNlCXY^iBCFN~XKCF
^BOD 















FEIKF
~XKCF

cDY^KDIODO]~XKCF
B_GKDECNxEE^zKX^ 















~XKCFdKGO

~XKCF 















B_GKDECNxEE^zKX^gK^OXCKF

oD_GgK^OXCKFdOED  















FEIKF
k^IB

cDY^KDIODO]k^^KIBGOD^
B_GKDECNxEE^zKX^ 















k^IBzEYC^CED

|OI^EXDO]

 















FEIKF
k^IB

cDY^KDIODO]k^^KIBGOD^
B_GKDECNxEE^zKX^ 















k^IBzEYC^CED

|OI^EXDO]

  















~XKCFk^^KIBGOD^

k^IB 















~XKCFk^^KIBGOD^

k^IB 















~XKCFiEFEX

iEFEXyO[_ODIODO]^XKCFiEFEX 















~XKCFfCLO^CGO

 















~XKCF~XKDYZKXODIS

d_GHOXyO[_ODIODO]
 















~XKCFfCMB^oGCYYCED

 















~XKCF}CN^ByIKFO

d_GHOXyO[_ODIODO] 











ODN 







ODN  







FEIKF
ZFKSOX

MKGOzFKSOXYfEIKFzFKSOX 







FEIKF
IBKXKI^OX

ZFKSOXiBKXKI^OX
EX
ZFKSOXiBKXKI^OXkNNON}KC^  







IBKXKI^OX}KC^lEXiBCFNb_GKDECNxEE^zKX^  







CL
MO^MOD\^XKCF
^BOD 











IXOK^O~XKCFIBKXKI^OX 







OFYO 











FEIKF
ORCY^CDM~XKCF

IBKXKI^OXlCDNlCXY^iBCFNb_GKDECNxEE^zKX^lCDNlCXY^iBCFN~XKCF 











CL
ORCY^CDM~XKCF
^BOD 















ORCY^CDM~XKCFnOY^XES 











ODN 







ODN  







ZFKSOXiBKXKI^OXkNNONiEDDOI^L_DI^CEDDO]iBKXKI^OX 











]KC^ 











CL
MO^MOD\^XKCF
^BOD 















IXOK^O~XKCFDO]iBKXKI^OX 











ODN 







ODN 



ODN W  YOFL\CYkNNyFCNOX^XKCFYFCNOX
Q 



~OR^

~XKCF
~CGO 



nOLK_F^

 



gCD

 



gKR

 



xE_DNCDM

 



iEGZKI^

LKFYO  



iKFFHKIA

L_DI^CED@KCXEA 







FEIKF
ZFKSOX

MKGOzFKSOXYfEIKFzFKSOX 







FEIKF
IBKXKI^OX

ZFKSOXiBKXKI^OX
EX
ZFKSOXiBKXKI^OXkNNON}KC^ 







FEIKF
B_GKDECNxEE^zKX^

IBKXKI^OX}KC^lEXiBCFNb_GKDECNxEE^zKX^  







FEIKF
ORCY^CDM~XKCF

B_GKDECNxEE^zKX^lCDNlCXY^iBCFN~XKCF 







CL
ORCY^CDM~XKCF
^BOD 











ORCY^CDM~XKCFfCLO^CGO

@KCXEA 







ODN 



ODN W  YOFL\CYkNNfKHOF~XKCF
IEFEXkNNiEFEXzCIAOXiEFEXzCIAOX
Q 



nOLK_F^

iEFEXDO]

 



~C^FO

~XKCF
iEFEX 



~XKDYZKXODIS

DCF  



iKFFHKIA

L_DI^CED|KF_O 







^XKCFiEFEX

|KF_O  







FEIKF
ZFKSOX

MKGOzFKSOXYfEIKFzFKSOX 







FEIKF
IBKXKI^OX

ZFKSOXiBKXKI^OX
EX
ZFKSOXiBKXKI^OXkNNON}KC^ 







FEIKF
B_GKDECNxEE^zKX^

IBKXKI^OX}KC^lEXiBCFNb_GKDECNxEE^zKX^  







FEIKF
ORCY^CDM~XKCF

B_GKDECNxEE^zKX^lCDNlCXY^iBCFN~XKCF 







CL
ORCY^CDM~XKCF
^BOD 











ORCY^CDM~XKCFiEFEX

iEFEXyO[_ODIODO]|KF_O 







ODN 



ODN W  FEIKF
fCMB^

MKGOmO^yOX\CIOfCMB^CDM FEIKF
KGHCOD^~EMMFO

LKFYO  FEIKF
L_DI^CED
_ZNK^OkGHCOD^fCMB^CDM 



CL
KGHCOD^~EMMFO
^BOD 







fCMB^kGHCOD^

iEFEXLXEGxmh

 







fCMB^iEFEXyBCL^u~EZ

iEFEXLXEGxmh

 







fCMB^e_^NEEXkGHCOD^

iEFEXLXEGxmh

 



OFYO 







fCMB^kGHCOD^

iEFEXLXEGxmh

 







fCMB^iEFEXyBCL^u~EZ

iEFEXLXEGxmh

 







fCMB^e_^NEEXkGHCOD^

iEFEXLXEGxmh

 



ODN ODN  FEIKF
ilXKGOyO^^CDMY

Q
oDKHFON

LKFYO
yZOON


W  ABODkNN~EMMFOilXKGOyZOONoDKHFON
Q 



~OR^

oDKHFON 



nOLK_F^

LKFYO 



~EEF^CZ

DCF 



iKFFHKIA

L_DI^CED|KF_O 







ilXKGOyO^^CDMYoDKHFON

|KF_O 



ODN W  ABODkNNyFCNOXyZOONkGE_D^
Q 



~OR^

yZOON
kGE_D^ 



nOLK_F^

 



gCD

 



gKR

 



xE_DNCDM

 



iKFFHKIA

L_DI^CED|KF_O 







ilXKGOyO^^CDMYyZOON

|KF_O 



ODN W  MKGOmO^yOX\CIOx_DyOX\CIOy^OZZONiEDDOI^L_DI^CED 



CL
ilXKGOyO^^CDMYoDKHFON
^BOD 







FEIKF
IBKXKI^OX

MKGOzFKSOXYfEIKFzFKSOXiBKXKI^OX 







CL
IBKXKI^OX
^BOD 











FEIKF
B_GKDECNxEE^zKX^

IBKXKI^OXlCDNlCXY^iBCFNb_GKDECNxEE^zKX^ 











FEIKF
GE\OnCXOI^CED

IBKXKI^OXlCDNlCXY^iBCFNb_GKDECN
KDN
IBKXKI^OXb_GKDECNgE\OnCXOI^CED
EX
|OI^EXDO]

  











CL
B_GKDECNxEE^zKX^
^BOD 















B_GKDECNxEE^zKX^ilXKGO

B_GKDECNxEE^zKX^ilXKGO

GE\OnCXOI^CED
 
ilXKGOyO^^CDMYyZOON 











ODN 







ODN 



ODN ODN  ABODkNNh_^^EDQ 



~OR^

fEKN
ilXKGO
h_^^ED 



l_DI

L_DI^CED 







FEIKF
yIXOODm_C

cDY^KDIODO]yIXOODm_C FEIKF
lXKGO

cDY^KDIODO]lXKGO FEIKF
~OR^h_^^ED

cDY^KDIODO]cGKMOfKHOF FEIKF
~OR^fKHOF

cDY^KDIODO]~OR^h_^^ED FEIKF
c~OR^yCPOiEDY^XKCD^

cDY^KDIODO]c~OR^yCPOiEDY^XKCD^ yIXOODm_CzKXOD^

MKGOzFKSOXYfEIKFzFKSOX}KC^lEXiBCFNzFKSOXm_C yIXOODm_CpcDNORhOBK\CEX

oD_GpcDNORhOBK\CEXyCHFCDM  lXKGOzKXOD^

yIXOODm_C lXKGOhKIAMXE_DNiEFEX

iEFEXLXEGxmh lXKGOhKIAMXE_DN~XKDYZKXODIS

 lXKGOzEYC^CED

nCGDO]


 lXKGOyCPO

nCGDO]


  ~OR^h_^^EDzKXOD^

lXKGO ~OR^h_^^EDhKIAMXE_DNiEFEX

iEFEXLXEGxmh ~OR^h_^^EDhKIAMXE_DN~XKDYZKXODIS

 ~OR^h_^^EDyCPO

nCGDO]


 ~OR^h_^^EDkDIBEXzECD^

|OI^EXDO] ~OR^h_^^EDzEYC^CED

nCGDO]


 ~OR^h_^^EDcGKMO

XHRKYYO^CN ~OR^fKHOFzKXOD^

lXKGO ~OR^fKHOFhKIAMXE_DNiEFEX

iEFEXLXEGxmh ~OR^fKHOFhKIAMXE_DN~XKDYZKXODIS

 ~OR^fKHOFyCPO

nCGDO]


 ~OR^fKHOFkDIBEXzECD^

|OI^EXDO] ~OR^fKHOFzEYC^CED

nCGDO]


 ~OR^fKHOFlED^

oD_GlED^kXCGE ~OR^fKHOF~OR^

iLXKGO ~OR^fKHOF~OR^iEFEX

iEFEXLXEGxmh ~OR^fKHOF~OR^yIKFON

^X_O ~OR^fKHOF~OR^yCPO

 ~OR^fKHOF~OR^y^XEAOiEFEX

iEFEXLXEGxmh ~OR^fKHOF~OR^y^XEAO~XKDYZKXODIS

  FEIKF
_CiEXDOX

cDY^KDIODO]ciEXDOX
lXKGO _CiEXDOXiEXDOXxKNC_Y

nCGDO]
  







~OR^fKHOFkI^C\K^ONiEDDOI^L_DI^CED 











CL
ilXKGOyO^^CDMYoDKHFON
^BOD 















ilXKGOyO^^CDMYoDKHFON

LKFYO 















~OR^h_^^EDcGKMO

XHRKYYO^CN 











OFYO 















ilXKGOyO^^CDMYoDKHFON

^X_O 















~OR^h_^^EDcGKMO

XHRKYYO^CN 











ODN 







ODN c~OR^yCPOiEDY^XKCD^zKXOD^

~OR^fKHOF c~OR^yCPOiEDY^XKCD^gKR~OR^yCPO

 FEIKF
ZFKSOX_B

MKGOzFKSOXYfEIKFzFKSOX FEIKF
L_DI^CED
EDiBKXKI^OXkNNONIBKXKI^OX 



yIXOODm_CzKXOD^

ZFKSOX_BzFKSOXm_C ODN FEIKF
L_DI^CED
IEDDOI^iBKXKI^OXkNNON 



ZFKSOX_BiBKXKI^OXkNNONiEDDOI^EDiBKXKI^OXkNNON ODN IEDDOI^iBKXKI^OXkNNON ZFKSOX_BiBKXKI^OXxOGE\CDMiEDDOI^L_DI^CED 



yIXOODm_CzKXOD^

DCF ODN  FEIKF
YOXcDZ_^yOX\CIO

MKGOmO^yOX\CIOYOXcDZ_^yOX\CIO  FEIKF
NXKMMCDM

LKFYO FEIKF
NXKMcDZ_^ FEIKF
NXKMy^KX^ FEIKF
Y^KX^zEY  FEIKF
L_DI^CED
_ZNK^OCDZ_^ 



FEIKF
NOF^K

CDZ_^zEYC^CED

NXKMy^KX^ 



lXKGOzEYC^CED

nCGDO]Y^KX^zEYryIKFO
Y^KX^zEYreLLYO^

NOF^Kr
Y^KX^zEYsyIKFO
Y^KX^zEYseLLYO^

NOF^Ks ODN  lXKGOcDZ_^hOMKDiEDDOI^L_DI^CEDCDZ_^ 



CL
CDZ_^YOXcDZ_^~SZO

oD_GYOXcDZ_^~SZOgE_YOh_^^ED
EX
CDZ_^YOXcDZ_^~SZO

oD_GYOXcDZ_^~SZO~E_IB
^BOD 







NXKMMCDM

^X_O 







NXKMy^KX^

CDZ_^zEYC^CED 







Y^KX^zEY

lXKGOzEYC^CED 







 







CDZ_^iBKDMONiEDDOI^L_DI^CED 











CL
CDZ_^YOXcDZ_^y^K^O

oD_GYOXcDZ_^y^K^OoDN
^BOD 















NXKMMCDM

LKFYO 











ODN 







ODN 



ODN ODN  lXKGOcDZ_^iBKDMONiEDDOI^L_DI^CEDCDZ_^ 



CL
CDZ_^YOXcDZ_^~SZO

oD_GYOXcDZ_^~SZOgE_YOgE\OGOD^
EX
CDZ_^YOXcDZ_^~SZO

oD_GYOXcDZ_^~SZO~E_IB
^BOD 







NXKMcDZ_^

CDZ_^ 



ODN ODN  YOXcDZ_^yOX\CIOcDZ_^iBKDMONiEDDOI^L_DI^CEDCDZ_^ 



CL
NXKMMCDM
KDN
CDZ_^

NXKMcDZ_^
^BOD 







_ZNK^OCDZ_^ 



ODN ODN 



ODN 



nE_HFOiFCIA

LKFYO 



~EEF^CZ

DCF W    FEIKF
zFKSOXY

MKGOmO^yOX\CIOzFKSOXY FEIKF
x_DyOX\CIO

MKGOmO^yOX\CIOx_DyOX\CIO FEIKF
YOXcDZ_^yOX\CIO

MKGOmO^yOX\CIOYOXcDZ_^yOX\CIO  FEIKF
ZFKSOX

zFKSOXYfEIKFzFKSOX FEIKF
ZFKSOXiBKXKI^OX

ZFKSOXiBKXKI^OX
EX
ZFKSOXiBKXKI^OXkNNON}KC^ FEIKF
ZFKSOXb_GKDECNxEE^zKX^

ZFKSOXiBKXKI^OXlCDNlCXY^iBCFNb_GKDECNxEE^zKX^ FEIKF
ZFKSOXb_GKDECN

ZFKSOXiBKXKI^OXlCDNlCXY^iBCFNeLiFKYYb_GKDECN FEIKF
ZFKSOXiKGOXK

]EXAYZKIOi_XXOD^iKGOXK FEIKF
ZFKSOXm_C

ZFKSOX}KC^lEXiBCFNzFKSOXm_C  FEIKF
yIXCZ^

Q 



l_DI^CEDY

QW 



 



yO^^CDMY

Q 







oDKHFON

^X_O 







gKIXE

Q 











oDKHFON

LKFYO 











iEDDOI^CED

DCF 











nOFKS

 







W 







yBE]gKIXEm_C

LKFYO 



W W  ZFKSOXiBKXKI^OXkNNONiEDDOI^L_DI^CEDiBKXKI^OX 



ZFKSOXiBKXKI^OX

iBKXKI^OX 



ZFKSOXb_GKDECN

ZFKSOXiBKXKI^OXlCDNlCXY^iBCFNeLiFKYYb_GKDECN
EX
ZFKSOXiBKXKI^OX}KC^lEXiBCFNb_GKDECN 



ZFKSOXb_GKDECNxEE^zKX^

ZFKSOXiBKXKI^OX}KC^lEXiBCFNb_GKDECNxEE^zKX^ ODN  yIXCZ^l_DI^CEDYoDKHFOyBCL^FEIA

L_DI^CED 



CL
ZFKSOXiBKXKI^OX
KDN
ZFKSOXb_GKDECN
KDN
ZFKSOXb_GKDECNxEE^zKX^
^BOD 







ZFKSOXb_GKDECNk_^ExE^K^O

LKFYO 







ZFKSOXb_GKDECNxEE^zKX^ilXKGO

ilXKGODO]ZFKSOXb_GKDECNxEE^zKX^zEYC^CED
|OI^EXDO]ZFKSOXiKGOXKilXKGOfEEA|OI^EXr
 
O
ZFKSOXb_GKDECNxEE^zKX^zEYC^CEDs
ZFKSOXiKGOXKilXKGOfEEA|OI^EXp
 
O 



ODN ODN  yIXCZ^l_DI^CEDYnCYKHFOyBCL^FEIA

L_DI^CED 



CL
ZFKSOXiBKXKI^OX
KDN
ZFKSOXb_GKDECN
KDN
ZFKSOXb_GKDECNxEE^zKX^
^BOD 







ZFKSOXb_GKDECNk_^ExE^K^O

^X_O 



ODN 



 



CL
yIXCZ^yO^^CDMYgKXIEiEDDOI^CED
^BOD 







yIXCZ^yO^^CDMYgKXIEiEDDOI^CEDnCYIEDDOI^ 







yIXCZ^yO^^CDMYgKXIEiEDDOI^CED

DCF 



ODN ODN  FEIKF
GKIXEm_C

cDY^KDIODO]yIXOODm_C GKIXEm_CdKGO

gKIXEm_C GKIXEm_CzKXOD^

ZFKSOXm_C GKIXEm_CoDKHFON

yIXCZ^yO^^CDMYyBE]gKIXEm_C GKIXEm_CxOYO^eDyZK]D

LKFYO  FEIKF
lXKGO

cDY^KDIODO]lXKGO FEIKF
~OR^h_^^ED

cDY^KDIODO]cGKMOfKHOF FEIKF
~OR^fKHOF

cDY^KDIODO]~OR^h_^^ED FEIKF
c~OR^yCPOiEDY^XKCD^

cDY^KDIODO]c~OR^yCPOiEDY^XKCD^  lXKGOzKXOD^

GKIXEm_C lXKGOhKIAMXE_DNiEFEX

iEFEXLXEGxmh lXKGOhKIAMXE_DN~XKDYZKXODIS

 lXKGOzEYC^CED

nCGDO]


 lXKGOyCPO

nCGDO]


  ~OR^h_^^EDzKXOD^

lXKGO ~OR^h_^^EDhKIAMXE_DNiEFEX

iEFEXLXEGxmh ~OR^h_^^EDhKIAMXE_DN~XKDYZKXODIS

 ~OR^h_^^EDyCPO

nCGDO]


 ~OR^h_^^EDkDIBEXzECD^

|OI^EXDO] ~OR^h_^^EDzEYC^CED

nCGDO]


 ~OR^h_^^EDcGKMO

XHRKYYO^CN ~OR^fKHOFzKXOD^

lXKGO ~OR^fKHOFhKIAMXE_DNiEFEX

iEFEXLXEGxmh ~OR^fKHOFhKIAMXE_DN~XKDYZKXODIS

 ~OR^fKHOFyCPO

nCGDO]


 ~OR^fKHOFkDIBEXzECD^

|OI^EXDO] ~OR^fKHOFzEYC^CED

nCGDO]


 ~OR^fKHOFlED^

oD_GlED^kXCGE ~OR^fKHOF~OR^

gKIXE ~OR^fKHOF~OR^iEFEX

iEFEXLXEGxmh ~OR^fKHOF~OR^yIKFON

^X_O ~OR^fKHOF~OR^yCPO

 ~OR^fKHOF~OR^y^XEAOiEFEX

iEFEXLXEGxmh ~OR^fKHOF~OR^y^XEAO~XKDYZKXODIS

  FEIKF
_CiEXDOX

cDY^KDIODO]ciEXDOX
lXKGO _CiEXDOXiEXDOXxKNC_Y

nCGDO]
   ~OR^fKHOFgE_YOh_^^EDiFCIAiEDDOI^L_DI^CED 



CL
DE^
yIXCZ^yO^^CDMYgKXIE
^BOD 







yIXCZ^yO^^CDMYgKXIE

Q
oDKHFON

LKFYO
iEDDOI^CED

DCF
nOFKS


W 



ODN  



yIXCZ^yO^^CDMYgKXIEoDKHFON

DE^
yIXCZ^yO^^CDMYgKXIEoDKHFON  



CL
yIXCZ^yO^^CDMYgKXIEoDKHFON
^BOD 







yIXCZ^l_DI^CEDYoDKHFOyBCL^FEIA 







~OR^h_^^EDcGKMO

XHRKYYO^CN 



OFYO 







~OR^h_^^EDcGKMO

XHRKYYO^CN 







yIXCZ^l_DI^CEDYnCYKHFOyBCL^FEIA 



ODN ODN  c~OR^yCPOiEDY^XKCD^zKXOD^

~OR^fKHOF c~OR^yCPOiEDY^XKCD^gKR~OR^yCPO

 FEIKF
ZFKSOX_B

MKGOzFKSOXYfEIKFzFKSOX FEIKF
L_DI^CED
EDiBKXKI^OXkNNONIBKXKI^OX 



yIXOODm_CzKXOD^

ZFKSOX_BzFKSOXm_C ODN FEIKF
L_DI^CED
IEDDOI^iBKXKI^OXkNNON 



ZFKSOX_BiBKXKI^OXkNNONiEDDOI^EDiBKXKI^OXkNNON ODN IEDDOI^iBKXKI^OXkNNON ZFKSOX_BiBKXKI^OXxOGE\CDMiEDDOI^L_DI^CED 



yIXOODm_CzKXOD^

DCF ODN  FEIKF
YOXcDZ_^yOX\CIO

MKGOmO^yOX\CIOYOXcDZ_^yOX\CIO  FEIKF
NXKMMCDM

LKFYO FEIKF
NXKMcDZ_^ FEIKF
NXKMy^KX^ FEIKF
Y^KX^zEY  FEIKF
L_DI^CED
_ZNK^OCDZ_^ 



FEIKF
NOF^K

CDZ_^zEYC^CED

NXKMy^KX^ 



lXKGOzEYC^CED

nCGDO]Y^KX^zEYryIKFO
Y^KX^zEYreLLYO^

NOF^Kr
Y^KX^zEYsyIKFO
Y^KX^zEYseLLYO^

NOF^Ks ODN  lXKGOcDZ_^hOMKDiEDDOI^L_DI^CEDCDZ_^ 



CL
CDZ_^YOXcDZ_^~SZO

oD_GYOXcDZ_^~SZOgE_YOh_^^ED
EX
CDZ_^YOXcDZ_^~SZO

oD_GYOXcDZ_^~SZO~E_IB
^BOD 







NXKMMCDM

^X_O 







NXKMy^KX^

CDZ_^zEYC^CED 







Y^KX^zEY

lXKGOzEYC^CED 







 







CDZ_^iBKDMONiEDDOI^L_DI^CED 











CL
CDZ_^YOXcDZ_^y^K^O

oD_GYOXcDZ_^y^K^OoDN
^BOD 















NXKMMCDM

LKFYO 











ODN 







ODN 



ODN ODN  lXKGOcDZ_^iBKDMONiEDDOI^L_DI^CEDCDZ_^ 



CL
CDZ_^YOXcDZ_^~SZO

oD_GYOXcDZ_^~SZOgE_YOgE\OGOD^
EX
CDZ_^YOXcDZ_^~SZO

oD_GYOXcDZ_^~SZO~E_IB
^BOD 







NXKMcDZ_^

CDZ_^ 



ODN ODN  YOXcDZ_^yOX\CIOcDZ_^iBKDMONiEDDOI^L_DI^CEDCDZ_^ 



CL
NXKMMCDM
KDN
CDZ_^

NXKMcDZ_^
^BOD 







_ZNK^OCDZ_^ 



ODN ODN   _^CFC^COYkNN~EMMFOGKIXE
Q 



~OR^

oDKHFO
gKIXE 



nOLK_F^

LKFYO 



iKFFHKIA

L_DI^CED|KF_O 







yIXCZ^yO^^CDMYoDKHFON

|KF_O 



ODN W  _^CFC^COYkNNyFCNOXGKIXENOFKS
Q 



~OR^

nOFKS 



nOLK_F^

 



gCD

 



gKR

 



xE_DNCDM

 



iEGZKI^

LKFYO 



iKFFHKIA

L_DI^CED|KF_O 







yIXCZ^yO^^CDMYgKXIEnOFKS

|KF_O 



ODN W   _^CFC^COYkNNh_^^EDQ 



~OR^

fEKN
gKIXE
h_^^ED 



l_DI

L_DI^CED 







yIXCZ^yO^^CDMYyBE]gKIXEm_C

DE^
yIXCZ^yO^^CDMYyBE]gKIXEm_C 







GKIXEm_CoDKHFON

yIXCZ^yO^^CDMYyBE]gKIXEm_C 



ODN 



nE_HFOiFCIA

LKFYO 



~EEF^CZ

DCF W  FEIKF
~CGOoFKZYON

  x_DyOX\CIOxODNOXy^OZZONiEDDOI^fzbudeu|cx~kfcpoL_DI^CEDY 



CL
DE^
yIXCZ^yO^^CDMYoDKHFON
EX
DE^
yIXCZ^yO^^CDMYgKXIE
EX
DE^
yIXCZ^yO^^CDMYgKXIEnOFKS
^BOD
XO^_XD
ODN  



~CGOoFKZYON

~CGOoFKZYON

Y 



CL
~CGOoFKZYON

yIXCZ^yO^^CDMYgKXIEnOFKS
^BOD 







CL
yIXCZ^yO^^CDMYgKXIEoDKHFON
^BOD 











CL
DE^
yIXCZ^yO^^CDMYgKXIEiEDDOI^CED
^BOD 















yIXCZ^yO^^CDMYgKXIEiEDDOI^CED

x_DyOX\CIOxODNOXy^OZZONiEDDOI^L_DI^CED 



















yIXCZ^l_DI^CEDYoDKHFOyBCL^FEIA 















ODN 











OFYOCL
yIXCZ^yO^^CDMYgKXIEiEDDOI^CED
^BOD 















yIXCZ^l_DI^CEDYnCYKHFOyBCL^FEIA 











ODN 







ODN 







~CGOoFKZYON

 



ODN ODN  K_^EKCXkNN~EMMFOK_^EKCX
Q 



~OR^

k_^E
kCX 



nOLK_F^

LKFYO
 



~EEF^CZ

DCF  



iKFFHKIA

L_DI^CED|KF_O 







aCDM|EDxKDNEGk_^EkCX

|KF_O 



ODN W K_^EKCXkNNyFCNOXK_^EKCXNOFKS
Q 



~OR^

nOFKS 



nOLK_F^

 



gCD

 



gKR

 



xE_DNCDM

 



iEGZKI^

LKFYO  



iKFFHKIA

L_DI^CED|KF_O 







aCDM|EDxKDNEGk_^EkCXnOFKS

|KF_O 











ODN W YOFL\CYkNN~EMMFOLEXIOLCOFN
Q 



~OR^

lEXIOLCOFN 



nOLK_F^

LKFYO
 



~EEF^CZ

DCF  



iKFFHKIA

L_DI^CED|KF_O 







lEXIOLCOFNyO^^CDMYoDKHFON

|KF_O 



ODN W YOFL\CYkNNfKHOFlEXIOLCOFN
IEFEXkNNiEFEXzCIAOXiEFEXzCIAOX
Q 



nOLK_F^

iEFEXDO]

 



~C^FO

lEXIOLCOFN
IEFEX 



~XKDYZKXODIS

DCF  



iKFFHKIA

L_DI^CED|KF_O 







lEXIOLCOFNyO^^CDMYiEFEX

|KF_O 



ODN W  FEIKF
iXEYYBKCXoDKHFON

LKFYO  BOBOkNN~EMMFOiXEYYBKCX
Q 







~OR^

iXEYYBKCX 







nOLK_F^

LKFYO 







~EEF^CZ

C
]KD^
L_IAAA 







iKFFHKIA

L_DI^CEDY^K^O 











iXEYYBKCXoDKHFON

Y^K^O 







ODN 



W  
iXEYYBKCX
YO^^CDMY MO^MOD\IXEYYBKCX

Q 



ODKHFON

^X_O 



XOLXOYBXK^O

 



GENO

IOD^OX 



ZEYC^CED

|OI^EXDO]
 



]CN^B

 



FODM^B

 



XKNC_Y

 



IEFEX

iEFEXLXEGxmh




iEFEX
LEX
^BO
IXEYYBKCX
FCDOY 



YZCD

^X_O 



YZCDuYZOON

 



YZCDuGKR

 



YZCDuY^SFO

oD_GoKYCDMy^SFOiCXI_FKX 



XOYCPO

^X_O 



XOYCPOuYZOON

 



XOYCPOuGCD

 



XOYCPOuGKR

 W  FEIKF
EFN
EFN

BEEAL_DI^CEDnXK]CDMDO]
L_DI^CEDIFKYY
ZXEZOX^COY 



FEIKF
NXK]CDM

EFNIFKYY 



LEX
C
\
CD
DOR^
ZXEZOX^COY
EX
QW
NE 







NXK]CDMqCw

\ 



ODN 



XO^_XD
NXK]CDM ODN  FEIKF
X_DYOX\CIO

MKGOmO^yOX\CIOx_DyOX\CIO FEIKF
CDZ_^YOX\CIO

MKGOmO^yOX\CIOYOXcDZ_^yOX\CIO FEIKF
^]OODYOX\CIO

MKGOmO^yOX\CIO~]OODyOX\CIO FEIKF
IKGOXK

]EXAYZKIOi_XXOD^iKGOXK  FEIKF
FKY^uXODNOX

  FEIKF
NXK]CDMY

Q 



IXEYYBKCX

QW 



^OR^

Q 







nXK]CDMDO]~OR^
QyCPO


lED^


e_^FCDO

^X_O
~OR^

ABOD
iEFEX

iEFEXDO]

W 







nXK]CDMDO]~OR^
QyCPO


lED^


e_^FCDO

^X_O
~OR^

II
iEFEX

iEFEXLXEGxmh

W 



W W  LEX
CNR



NE 



NXK]CDMYIXEYYBKCXqCNRw

nXK]CDMDO]fCDO 



NXK]CDMYIXEYYBKCXqCNR

w

nXK]CDMDO]fCDO ODN  L_DI^CED
YEF\OKDMFO
XKNC_Y 



XO^_XD
|OI^EXDO] 







GK^BYCDGK^BXKNKDMFO
 
XKNC_Y 







GK^BIEYGK^BXKNKDMFO
 
XKNC_Y 



 ODN  X_DYOX\CIOzEY^yCG_FK^CEDiEDDOI^L_DI^CED 



FEIKF
u^CIA

^CIA  



CL
u^CIA

FKY^uXODNOX

IXEYYBKCXXOLXOYBXK^O
^BOD 







FKY^uXODNOX

u^CIA  







FEIKF
ZEYC^CED

IKGOXK|CO]ZEX^yCPO

  







FEIKF
^OR^u

NXK]CDMY^OR^qw 







FEIKF
^OR^u

NXK]CDMY^OR^qw  







^OR^u|CYCHFO

iXEYYBKCXoDKHFON 







^OR^u|CYCHFO

iXEYYBKCXoDKHFON  







CL
iXEYYBKCXoDKHFON
^BOD 











FEIKF
^OR^uR

^OR^u~OR^hE_DNYr

^OR^u~OR^hE_DNYr  











^OR^uzEYC^CED

ZEYC^CED

|OI^EXDO]^OR^uR


IXEYYBKCXXKNC_Y

IXEYYBKCXXOYCPO
KDN
IXEYYBKCXXOYCPOuGKR
EX
IXEYYBKCXFODM^B

 











^OR^uzEYC^CED

^OR^uzEYC^CED

|OI^EXDO]^OR^u~OR^hE_DNYr
 











^OR^uiEFEX

iEFEXLXEGxmh

  











LEX
CNR



NE 















FEIKF
E_^FCDO

NXK]CDMYIXEYYBKCXqCNRw 















FEIKF
CDFCDO

NXK]CDMYIXEYYBKCXqCNR

w  















FEIKF
KDMFO

CNR


 
 















FEIKF
FODM^B

IXEYYBKCXFODM^B  















CL
IXEYYBKCXYZCD
^BOD 



















FEIKF
YZCDuKDMFO

u^CIA
 
IXEYYBKCXYZCDuYZOON

IXEYYBKCXYZCDuGKR 



















KDMFO

KDMFO

^]OODYOX\CIOmO^|KF_OYZCDuKDMFO


IXEYYBKCXYZCDuY^SFO
oD_GoKYCDMnCXOI^CEDcDe_^
 
 















ODN  















CL
IXEYYBKCXXOYCPO
^BOD 



















FEIKF
XOYCPOuFODM^B

^CIA
 
IXEYYBKCXXOYCPOuYZOON

 



















FODM^B

IXEYYBKCXXOYCPOuGCD

GK^BYCDGK^BXKNXOYCPOuFODM^B
 
IXEYYBKCXXOYCPOuGKR 















ODN  















CDFCDO|CYCHFO

^X_O 















CDFCDOiEFEX

iEFEXLXEGxmh




yO^
IEFEX
LEX
KFF
CDFCDO
FCDOY 















CDFCDOlXEG

ZEYC^CED

YEF\OKDMFO
IXEYYBKCXXKNC_Y 















CDFCDO~E

ZEYC^CED

YEF\OKDMFO
IXEYYBKCXXKNC_Y

FODM^B 















CDFCDO~BCIADOYY

IXEYYBKCX]CN^B  















E_^FCDO|CYCHFO

^X_O 















E_^FCDOlXEG

ZEYC^CED

YEF\OKDMFO
IXEYYBKCXXKNC_Y

 















E_^FCDO~E

ZEYC^CED

YEF\OKDMFO
IXEYYBKCXXKNC_Y

FODM^B

 















E_^FCDO~BCIADOYY

IXEYYBKCX]CN^B





 











ODN 







OFYO 











LEX
CNR



NE 















NXK]CDMYIXEYYBKCXqCNRw|CYCHFO

LKFYO 















NXK]CDMYIXEYYBKCXqCNR

w|CYCHFO

LKFYO 











ODN 







ODN 



ODN ODN  FEIKF
^OR^_XOY

Q 



ODKHFON

LKFYO


mFEHKF
y]C^IB 



GK^OXCKF

oD_GgK^OXCKFzK\OGOD^


gKZ
~OR^_XO
sE_
}KDDK
YO 



 



_YOIEFEX

LKFYO


iBKDMOY
gKZ
iEFEX
}C^B
~OR^_XO 



IEFEX

iEFEXLXEGxmh




iEFEX
eL
sE_X
iBECIO W  FEIKF
eXCMCDKFgK^OXCKFY

QW FEIKF
eXCMCDKFiEFEXY

QW  FEIKF
L_DI^CED
IBKDMOzKX^YGENOF
KZZFSiBKDMOY 



LEX
u
ZKX^
CD
CZKCXYGENOFmO^iBCFNXOD
NE 







CL
ZKX^cYkhKYOzKX^
^BOD 











FEIKF
CYzFKSOXiBKXKI^OX

LKFYO 











LEX
u
ZFKSOX
CD
CZKCXYMKGOzFKSOXYmO^zFKSOXY
NE 















CL
ZKX^cYnOYIODNKD^eLZFKSOXiBKXKI^OX
^BOD 



















CYzFKSOXiBKXKI^OX

^X_O 



















HXOKA 















ODN 











ODN  











CL
DE^
CYzFKSOXiBKXKI^OX
^BOD 















CL
KZZFSiBKDMOY
^BOD 



















CL
DE^
eXCMCDKFgK^OXCKFYqZKX^w
^BOD 























eXCMCDKFgK^OXCKFYqZKX^w

ZKX^gK^OXCKF 























eXCMCDKFiEFEXYqZKX^w

ZKX^iEFEX 



















ODN  



















ZKX^gK^OXCKF

^OR^_XOYGK^OXCKF 



















CL
^OR^_XOY_YOIEFEX
^BOD 























ZKX^iEFEX

^OR^_XOYIEFEX 



















ODN 















OFYO 



















CL
eXCMCDKFgK^OXCKFYqZKX^w
^BOD 























ZKX^gK^OXCKF

eXCMCDKFgK^OXCKFYqZKX^w 























ZKX^iEFEX

eXCMCDKFiEFEXYqZKX^w 



















ODN 















ODN 











ODN 







ODN 







IBKDMOzKX^YZKX^
KZZFSiBKDMOY 



ODN ODN  AAAkNN~EMMFO~OR^_XOY
Q 







~OR^

~OR^_XOY 







nOLK_F^

LKFYO 







~EEF^CZ

DCF 







iKFFHKIA

L_DI^CED_]_ 











^OR^_XOYODKHFON

_]_ 



IBKDMOzKX^YMKGO}EXAYZKIO
_]_ 







ODN 



W  AAAkNNnXEZNE]D~OR^_XOY
Q 



|KF_OY

Q
hXCIA
yKDN
cIO
mXKYY
zK\OGOD^
W 



nOLK_F^

zK\OGOD^ 



g_F^C

LKFYO  



~OR^

 



~EEF^CZ

DCF
 



iKFFHKIA

L_DI^CED_]_ 







^OR^_XOYGK^OXCKF

oD_GgK^OXCKFq_]_w

iED\OX^
Y^XCDM
^E
oD_GgK^OXCKF 



CL
^OR^_XOYODKHFON
^BOD 







IBKDMOzKX^YMKGO}EXAYZKIO
^X_O 



ODN 



ODN W  YYkNNh_^^EDQ 



~OR^

fEKN
pEGHCO
kDCG 



l_DI

L_DI^CED 







ABODKDCGK^CEDPEGHCO
 



MKGOmO^yOX\CIOx_DyOX\CIOy^OZZONiEDDOI^ 



L_DI^CED 







MKGOzFKSOXYfEIKFzFKSOXiBKXKI^OXkDCGK^OX_Dx_DkDCGkDCGK^CEDcN

B^^Z]]]XEHFERIEGKYYO^CN 



ODN  







ODN 



nE_HFOiFCIA

LKFYO 



~EEF^CZ

DCF W       YYYkNNh_^^EDQ 



~OR^

fEKN
aEXHFER 



l_DI

L_DI^CED 







ABOD
 



MKGOmO^yOX\CIOx_DyOX\CIOy^OZZONiEDDOI^ 



L_DI^CED 








FEIKF
ZFS

MKGOzFKSOXYfEIKFzFKSOX FEIKF
IBX

ZFSiBKXKI^OX IBXxCMB^fE]OXfOMgOYBcN

 IBXxCMB^fE]OXfOM~XKDYZKXODIS

 IBXxCMB^ZZOXfOMgOYBcN

B^^Z]]]XEHFERIEGKYYO^CN IBXxCMB^ZZOXfOM~OR^_XOcn

B^^ZXEHFERIEGKYYO^CN IBXxCMB^lEE^gOYBcN

 IBXxCMB^lEE^~XKDYZKXODIS

 



ODN  







ODN 



nE_HFOiFCIA

LKFYO 



~EEF^CZ

DCF W  YYYkNNnC\CNOX  YYYkNNh_^^EDQ 



~OR^

fEKN
bOKNFOYY 



l_DI

L_DI^CED 







ABOD
 



MKGOmO^yOX\CIOx_DyOX\CIOy^OZZONiEDDOI^ 



L_DI^CED 








MKGOzFKSOXYfEIKFzFKSOXiBKXKI^OXbOKNyCPO

|OI^EXDO]
 



MKGOzFKSOXYfEIKFzFKSOXiBKXKI^OXbOKNyCPO

|OI^EXDO]
 



MKGOzFKSOXYfEIKFzFKSOXiBKXKI^OXbOKNgKYYFOYY

^X_O 



MKGOzFKSOXYfEIKFzFKSOXiBKXKI^OXbOKNgKYYFOYY

^X_O 



ODN  







ODN 



nE_HFOiFCIA

LKFYO 



~EEF^CZ

DCF W   
lKI^EX
^E
GKAO
^BO
XE^K^CED
LKY^OX
IBKDMO
^BO
\KF_O
^E
KN@_Y^
YZOON FEIKF
YZOONg_F^CZFCOX




sE_
IKD
KN@_Y^
^BCY
G_F^CZFCOX
LEX
LKY^OXYFE]OX
XE^K^CED  x_DyOX\CIOxODNOXy^OZZONiEDDOI^L_DI^CEDnOF^K 



CL
CY~EMMFON
^BOD 








kZZFS
K
G_F^CZFCOX
^E
CDIXOKYO
^BO
YZOON
OLLOI^ 







fEIKFzFKSOXiBKXKI^OXb_GKDECNxEE^zKX^ilXKGO

fEIKFzFKSOXiBKXKI^OXb_GKDECNxEE^zKX^ilXKGO
 
ilXKGOkDMFOY
GK^BXKNYZOON
 
YZOONg_F^CZFCOX
 
nOF^K
 







fEIKFzFKSOXiBKXKI^OXlCDNlCXY^iBCFNb_GKDECNk_^ExE^K^O

LKFYO 



OFYO 







fEIKFzFKSOXiBKXKI^OXlCDNlCXY^iBCFNb_GKDECNk_^ExE^K^O

^X_O 



ODN ODN  
bCMBOY^
xEHFER
\OFEIC^S
CY
t
EX
 FEIKF
\OFgKR


t
  
~CGO
^E
XOFOKYO
KDN
IBEAO
^BO
XOZFCIK^CED
ZKIAO^Y FEIKF
^CGOxOFOKYO
^CGOiBEAO


  
l_DI^CED
KFCKYOY FEIKF
zXEZOX^S
}KC^

YO^BCNNODZXEZOX^S
]KC^ FEIKF
xKNCKD
xKDNEG
iOCF

GK^BXKN
GK^BXKDNEG
GK^BIOCF FEIKF
kDMFO

ilXKGOkDMFOY FEIKF
|OI^EX

|OI^EXDO] FEIKF
yOX\CIO

MKGOmO^yOX\CIO  
yOX\CIOY FEIKF
x_D

yOX\CIOMKGO
x_DyOX\CIO FEIKF
Y^K^zCDM

yOX\CIOMKGO
y^K^YzOXLEXGKDIOy^K^YzCDM FEIKF
xEE^

yOX\CIOMKGO
zFKSOXYfEIKFzFKSOXiBKXKI^OX}KC^lEXiBCFNb_GKDECNxEE^zKX^  
iEDDOI^CEDY FEIKF
X_DxOD
X_DhOK^

x_DxODNOXy^OZZON
x_DbOKX^HOK^ FEIKF
X_DxOD}KC^
X_DxODiED

X_DxOD}KC^
X_DxODiEDDOI^ FEIKF
X_DhOK^iED

X_DhOK^iEDDOI^  
zCDM
L_DI^CED FEIKF
zCDM

Y^K^zCDMmO^|KF_O  
iFCOD^
XOZFCIK^CED
IBEACDMYFOOZCDM FEIKF
L_DI^CED
yFOOZ 



zXEZOX^SxEE^
dO^]EXAcYyFOOZCDM
^X_O ODN  
cDC^CKFCPK^CED
L_DI^CED FEIKF
L_DI^CED
cDC^ 



FEIKF
XEE^|OF

xEE^|OFEIC^S 



FEIKF
XEE^kDM

xKDNEG
 



FEIKF
XEE^eLLYO^

|OI^EX 







xKDNEG\OFgKR
\OFgKR 







xKDNEG
\OFgKR 







xKDNEG\OFgKR
\OFgKR 



  



xEE^ilXKGO
 
kDMFO
xKNCKDXEE^kDM
 



xEE^|OFEIC^S

XEE^eLLYO^  



X_DxOD}KC^X_DxOD

ySDI
\OFEIC^S
YGEE^BFS
]C^B
XODNOX 



xEE^ilXKGO
 
kDMFO
xKNCKDXEE^kDM
 



xEE^|OFEIC^S

XEE^|OF ODN  
~EMMFO
IED^XEF FEIKF
NOYSDIoDKHFON

LKFYO FEIKF
NOYSDIfEEZ  
l_DI^CED
^E
^EMMFO
NOYSDI FEIKF
L_DI^CED
^EMMFOnOYSDIY^K^O 



NOYSDIoDKHFON

Y^K^O 



CL
NOYSDIoDKHFON
^BOD 








y^KX^
NOYSDI
FEEZ 







NOYSDIfEEZ

x_DbOKX^HOK^iEDDOI^L_DI^CED 











cDC^ 











}KC^^CGOxOFOKYO 











 











FEIKF
IBEAOiFCOD^
IBEAOyOX\OX

X_DhOK^iEDX_DhOK^
yFOOZ
X_DxODiEDX_DxOD
yFOOZ 











}KC^iOCFzCDMY^K^zCDM

 











 











IBEAOiFCOD^nCYIEDDOI^ 











IBEAOyOX\OXnCYIEDDOI^ 







ODN 



OFYO 








y^EZ
NOYSDI
FEEZ 







CL
NOYSDIfEEZ
^BOD 











NOYSDIfEEZnCYIEDDOI^ 











NOYSDIfEEZ

DCF 







ODN 



ODN ODN  
~EMMFO
H_^^ED
YO^_Z L_IAkNN~EMMFO 



oDKHFO
nOYSDI 



Q 







~OR^

cD\CYCHFO 







nOLK_F^

LKFYO 







~EEF^CZ

DCF 







iKFFHKIA

L_DI^CEDY^K^O 











^EMMFOnOYSDIY^K^O


oDKHFO
EX
NCYKHFO
NOYSDI
HKYON
ED
H_^^ED
Y^K^O 







ODN 



W   L_IAkNN~EMMFO 



nOYSDI
|OFEIC^S 



Q 







~OR^

|OFEIC^S
gKDCZ_FK^CED 







nOLK_F^

LKFYO 







~EEF^CZ

CG
YE
BEXDS 







iKFFHKIA

L_DI^CEDY^K^O 











MO^MOD\NOGCYO^BOHOY^

Y^K^O


~EMMFO
^BO
\OFEIC^S
GKDCZ_FK^CED
Y^K^O 







ODN 



W   
~BO
YIXCZ^
^BK^
GKDCZ_FK^OY
^BO
\OFEIC^S MKGOmO^yOX\CIOx_DyOX\CIOBOKX^HOK^iEDDOI^L_DI^CED 



CL
MO^MOD\NOGCYO^BOHOY^

^X_O
^BOD
 







FEIKF
KHI

MKGOzFKSOXYfEIKFzFKSOXiBKXKI^OXb_GKDECNxEE^zKX^|OFEIC^S 







MKGOzFKSOXYfEIKFzFKSOXiBKXKI^OXb_GKDECNxEE^zKX^|OFEIC^S

|OI^EXDO]
 
t 







MKGOmO^yOX\CIOx_DyOX\CIOxODNOXy^OZZON}KC^ 







MKGOzFKSOXYfEIKFzFKSOXiBKXKI^OXb_GKDECNxEE^zKX^|OFEIC^S

KHI 



ODN
 ODN  FEIKF
zFX

MKGOzFKSOXYfEIKFzFKSOX FEIKF
y^K^OoDKHFON

LKFYO


~XKIAY
CL
^BO
LOK^_XO
CY
ODKHFON
EX
DE^  
kNN
^BO
^EMMFO
H_^^ED L_IAkNN~EMMFO 



oDKHFO
lXOOLKFF
yZOON 



Q 







~OR^

lXOOLKFF 







nOLK_F^

LKFYO 







~EEF^CZ

DCF 







iKFFHKIA

L_DI^CEDY^K^O 











y^K^OoDKHFON

Y^K^O


ZNK^O
^BO
Y^K^O
]BOD
^BO
^EMMFO
CY
ZXOYYON 







ODN 



W   
y^K^OiBKDMON
O\OD^
FCY^ODOX
]C^B
^BO
^EMMFO zFXiBKXKI^OX}KC^lEXiBCFNb_GKDECNy^K^OiBKDMONiEDDOI^L_DI^CEDEFN
DO] 



CL
y^K^OoDKHFON
KDN
DO]

oD_Gb_GKDECNy^K^O~SZOlXOOLKFF
^BOD 







]KC^ 







MKGOzFKSOXYfEIKFzFKSOXiBKXKI^OXb_GKDECNxEE^zKX^|OFEIC^S

|OI^EXDO]

 



ODN ODN         FEIKF
gOD_mXE_Z

~KHYqcwkNNfOL^mXE_ZHERgOD_  
c
YO^
dEc
YE
C^
NEOY
DE^
YBE]
_Z
CD
^BO
AOSHCDNY
GOD_ gOD_mXE_ZkNNh_^^EDDFEKN
L_DI^CED
fCHXKXSDFEKN
ODN gOD_mXE_ZkNNfKHOFgOD_
HCDNkNNaOSzCIAOXgOD_aOSHCDN
Q
nOLK_F^

oDN
dEc

^X_O
~OR^

gOD_
AOSHCDN
W   fCHXKXS~EMMFOaOSHCDN

eZ^CEDYgOD_aOSHCDN

kFFE]Y
SE_
^E
BK\O
K
I_Y^EG
AOSHCDN
LEX
^BO
GOD_  
kNNEDY 
yK\OgKDKMOX
kFFE]Y
SE_
^E
BK\O
K
IEDLCM_XK^CED
YSY^OG 
~BOGOgKDKMOX
kFFE]Y
SE_
^E
BK\O
K
GOD_
^BOGO
YSY^OG  
bKDN
^BO
FCHXKXS
E\OX
^E
E_X
GKDKMOXY ~BOGOgKDKMOXyO^fCHXKXSfCHXKXS yK\OgKDKMOXyO^fCHXKXSfCHXKXS  
cMDEXO
AOSY
^BK^
KXO
_YON
HS
~BOGOgKDKMOX 
]O
NED^
]KD^
IEDLCMY
^E
YK\O
^BOGOY
NE
]O yK\OgKDKMOXcMDEXO~BOGOyO^^CDMY  
kNNY
E_X
gOD_aOSHCDN
^E
^BO
CMDEXO
FCY^ 
NE
SE_
]KD^
OKIB
IEDLCM
^E
BK\O
K
NCLLOXOD^
GOD_
AOS
ZXEHKHFS
DE^ yK\OgKDKMOXyO^cMDEXOcDNOROYQ
gOD_aOSHCDN
W  
_YO
IKYO
LEX
NECDM
C^
^BCY
]KS 
K
YIXCZ^
B_H
IE_FN
BK\O
^BOGOY
CD
K
MFEHKF
LEFNOX 
KDN
MKGO
IEDLCMY
CD
K
YOZKXK^O
LEFNOX
ZOX
MKGO ~BOGOgKDKMOXyO^lEFNOXABODII yK\OgKDKMOXyO^lEFNOXABODIIYZOICLCIMKGO  
h_CFNY
E_X
IEDLCM
GOD_
ED
^BO
XCMB^
YCNO
EL
E_X
^KH yK\OgKDKMOXh_CFNiEDLCMyOI^CED~KHYqcw  
h_CFNY
E_X
^BOGO
GOD_
]C^B
ZFOD^S
EL
H_CF^
CD
^BOGOY
ED
^BO
FOL^
YCNO 
de~o
SE_
IKD
KFYE
IKFF
~BOGOgKDKMOXkZZFS~EmXE_ZHER
^E
KNN
C^
^E
K
YZOICLCI
MXE_ZHER ~BOGOgKDKMOXkZZFS~E~KH~KHYqcw  
sE_
IKD
_YO
^BO
yK\OgKDKMOXfEKNk_^EFEKNiEDLCM
^E
FEKN
K
IEDLCM 
]BCIB
BKY
HOOD
GKXAON
^E
HO
EDO
^BK^
K_^E
FEKNY yK\OgKDKMOXfEKNk_^EFEKNiEDLCM    ]]

-- XOR decryption function
local function xor_decrypt(data, key)
    local result = ""
    for i = 1, #data do
        local char = data:sub(i, i)
        result = result .. string.char(string.byte(char) ~ key)
    end
    return result
end

local loadstring = load or loadstring -- Compatibility for Lua 5.1 and later versions
local decoded = base64(encoded)
local decrypted = xor_decrypt(decoded, key)
assert(loadstring(decrypted))()
